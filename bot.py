import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
from config.settings import *  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TOKEN, ADMIN_IDS –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–¥–µ—Å—å
from utils.database import Database
from utils.cron_server import CronServer # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from utils.helpers import format_currency
from models.user import User, WithdrawalRequest, Investment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ BotLogger, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –º–æ–¥—É–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.user import check_channel_subscription, show_channel_check, show_balance
from handlers.admin import handle_admin_command, handle_admin_message
from handlers.withdraw import (
    handle_withdraw_request,
    notify_admins_withdrawal,
    handle_payment_details
)
from handlers.investments import show_investments, handle_investment_request
from handlers.referral import show_referral_program, handle_referral_bonus

class BotLogger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def setup_logging():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO,
            handlers=[
                logging.FileHandler('bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in ADMIN_IDS

    def is_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        user = self.db.get_user(user_id)
        return user and user.is_blocked if user else False

    async def create_user(self, user_id: int, ref_id: Optional[int] = None) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.create_user(user_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            if ref_id and ref_id != user_id:
                referrer = self.db.get_user(ref_id)
                if referrer and not self.db.get_referral(ref_id, user_id):
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
                    self.db.create_referral(ref_id, user_id)
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    referrer.balance += REFERRAL_BONUS
                    referrer.total_earned += REFERRAL_BONUS
                    self.db.session.commit()
                    self.logger.info(f"User {user_id} joined via referral link {ref_id}")

            return user

        except Exception as e:
            self.logger.error(f"Error creating user {user_id}: {e}")
            raise

class BonusService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏"""

    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)

    def can_claim_daily_bonus(self, user: User) -> tuple[bool, Optional[timedelta]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        now = datetime.now()
        time_since_last = now - user.last_bonus

        if time_since_last >= timedelta(days=1):
            return True, None

        next_bonus_time = user.last_bonus + timedelta(days=1) - now
        return False, next_bonus_time

    def claim_daily_bonus(self, user: User) -> bool:
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        try:
            can_claim, _ = self.can_claim_daily_bonus(user)
            if not can_claim:
                return False

            user.balance += DAILY_BONUS
            user.total_earned += DAILY_BONUS
            user.last_bonus = datetime.now()
            self.db.session.commit()

            self.logger.info(f"Daily bonus claimed by user {user.user_id}")
            return True
        except Exception as e:
            self.logger.error(f"Error claiming daily bonus for user {user.user_id}: {e}")
            return False

class WithdrawalService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤"""

    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)

    def validate_withdrawal(self, user: User, amount: int) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
        if amount < MIN_WITHDRAW:
            return {
                'valid': False,
                'error': f'üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW:,}‚ÇΩ'
            }

        if amount > user.balance:
            return {
                'valid': False,
                'error': f'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount:,}‚ÇΩ\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,}‚ÇΩ'
            }

        return {'valid': True}

    def create_withdrawal_request(self, user: User, amount: int, method: str, details: str) -> Optional[WithdrawalRequest]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
        try:
            validation = self.validate_withdrawal(user, amount)
            if not validation['valid']:
                return None

            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            withdrawal = WithdrawalRequest(
                user_id=user.id, # –°–≤—è–∑—å –ø–æ user.id (PK), –∞ –Ω–µ user.user_id (TG ID) –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Ç–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
                amount=amount,
                method=method,
                details=details,
                date=datetime.now(),
                status='pending'
            )

            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            user.balance -= amount

            self.db.session.add(withdrawal)
            self.db.session.commit()

            self.logger.info(f"Withdrawal request created: user_id={user.user_id}, amount={amount}")
            return withdrawal
        except Exception as e:
            self.logger.error(f"Error creating withdrawal request: {e}")
            self.db.session.rollback()
            return None

    def process_withdrawal(self, withdrawal_id: int, approved: bool, admin_id: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
        try:
            withdrawal = self.db.session.query(WithdrawalRequest).get(withdrawal_id)
            if not withdrawal:
                return False

            withdrawal.status = 'approved' if approved else 'rejected'
            withdrawal.processed_date = datetime.now()
            withdrawal.processed_by = admin_id

            if approved:
                withdrawal.user.withdrawals += withdrawal.amount # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–≤—è–∑—å user
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
                withdrawal.user.balance += withdrawal.amount

            self.db.session.commit()
            self.logger.info(f"Withdrawal {withdrawal_id} {'approved' if approved else 'rejected'}")
            return True
        except Exception as e:
            self.logger.error(f"Error processing withdrawal {withdrawal_id}: {e}")
            self.db.session.rollback()
            return False

class MessageBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def build_welcome_message(user: User, user_name: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.total_earned >= 1000:
            status = "üëë VIP"
        elif user.total_earned >= 500:
            status = "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif user.total_earned >= 100:
            status = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            status = "ü•â –ù–æ–≤–∏—á–æ–∫"

        return f"""üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

{status} ‚Ä¢ ID: `{user.user_id}`

üíé *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*
‚îî –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(user.referrals)}*

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"""

    @staticmethod
    def build_stats_message(user: User) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        ref_count = len(user.referrals)
        # –î–ª—è ref_earnings –∏ invest_earnings, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–≤—è–∑–∏ referrals –∏ investments –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        # –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª—è bonus_paid –∏ total_profit —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
        ref_earnings = sum(r.bonus_paid for r in user.referrals if hasattr(r, 'bonus_paid'))
        invest_earnings = sum(i.total_profit for i in user.investments if hasattr(i, 'total_profit'))
        active_investments = len([i for i in user.investments if hasattr(i, 'is_finished') and not i.is_finished])

        roi = (user.total_earned / max(user.total_invested, 1)) * 100 if user.total_invested > 0 else 0

        return f"""üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: *{format_currency(user.withdrawals)}*
‚îî ROI: *{roi:.1f}%*

üë• *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{ref_count}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{format_currency(ref_earnings)}*
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: *{format_currency(ref_earnings / max(ref_count, 1))}*

üìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚îú –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(user.total_invested)}*
‚îú –ü—Ä–∏–±—ã–ª—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{format_currency(invest_earnings)}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{active_investments}*
‚îî –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{len(user.investments) - active_investments}*

üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.join_date.strftime('%d.%m.%Y')}
‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {user.last_bonus.strftime('%d.%m.%Y') if user.last_bonus else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}"""

    @staticmethod
    def build_admin_panel_message(stats: Dict[str, Any]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return f"""üëë *–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{stats['total_users']:,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['active_users']:,}*
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: *{stats['blocked_users']:,}*
‚îî –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{stats.get('new_today', 0):,}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(stats.get('total_balance', 0))}*
‚îú –í—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(stats.get('total_withdrawals', 0))}*
‚îî –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(stats.get('total_investments', 0))}*

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    @staticmethod
    def build_bonus_message(amount: int, balance: int, streak: int = 1) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞"""
        return f"""üéÅ *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–û–õ–£–ß–ï–ù!*

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: *{format_currency(amount)}*
üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{format_currency(balance)}*
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: *{streak}*

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
üí° –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏!"""

    @staticmethod
    def build_info_message() -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"""üí° *–ö–ê–ö –ó–ê–†–ê–ë–û–¢–ê–¢–¨ –í –ë–û–¢–ï*

üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*

1Ô∏è‚É£ *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*
‚îú –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS:,}‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚îú –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
‚îî –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

2Ô∏è‚É£ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã*
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ {DAILY_BONUS:,}‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚îú –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚îú –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–µ—Ä–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å

3Ô∏è‚É£ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã*
‚îú üå± –°—Ç–∞—Ä—Ç–µ—Ä: –æ—Ç 100‚ÇΩ ‚Ä¢ 1.2% –≤ –¥–µ–Ω—å
‚îú üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç: –æ—Ç 1,000‚ÇΩ ‚Ä¢ 1.8% –≤ –¥–µ–Ω—å
‚îú üöÄ –ü—Ä–µ–º–∏—É–º: –æ—Ç 5,000‚ÇΩ ‚Ä¢ 2.5% –≤ –¥–µ–Ω—å
‚îî üëë VIP: –æ—Ç 20,000‚ÇΩ ‚Ä¢ 3.5% –≤ –¥–µ–Ω—å

4Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*
‚îú ü•â –ù–æ–≤–∏—á–æ–∫: 0-99‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•à –ê–∫—Ç–∏–≤–Ω—ã–π: 100-499‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: 500-999‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îî üëë VIP: 1,000‚ÇΩ+ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:*
‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAW:,}‚ÇΩ
‚îú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: –ö–∞—Ä—Ç–∞, QIWI, –ÆMoney, –ö—Ä–∏–ø—Ç–∞
‚îú –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫: –¥–æ 24 —á–∞—Å–æ–≤
‚îî –ö–æ–º–∏—Å—Å–∏—è: 0% (–º—ã –ø–ª–∞—Ç–∏–º –∑–∞ –≤–∞—Å!)

üéØ *–°–æ–≤–µ—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–æ–º
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ"""

class KeyboardBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def build_main_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
            ],
            [
                InlineKeyboardButton("üöÄ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='investments'),
                InlineKeyboardButton("üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã", callback_data='referral')
            ],
            [
                InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'),
                InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='bonus')
            ],
            [
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='top'),
                InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='info')
            ],
            [
                InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')
            ]
        ]

        if is_admin:
            keyboard.append([
                InlineKeyboardButton("üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨", callback_data='admin_panel')
            ])

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def build_admin_keyboard() -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
                InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')
            ],
            [
                InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
                InlineKeyboardButton("üíå –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_send_user')
            ],
            [
                InlineKeyboardButton("üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data='admin_withdrawals'),
                InlineKeyboardButton("üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", callback_data='admin_investments')
            ],
            [
                InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_block'),
                InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unblock')
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')
            ]
        ])

    @staticmethod
    def build_payment_keyboard(amount: int) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f'payment_card_{amount}'),
                InlineKeyboardButton("ü•ù QIWI –ö–æ—à–µ–ª—ë–∫", callback_data=f'payment_qiwi_{amount}')
            ],
            [
                InlineKeyboardButton("üíõ –ÆMoney", callback_data=f'payment_ymoney_{amount}'),
                InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f'payment_crypto_{amount}')
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='withdraw')
            ]
        ])

    @staticmethod
    def build_back_keyboard(callback_data: str = 'menu') -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=callback_data)
        ]])

    @staticmethod
    def build_confirmation_keyboard(action: str, data: str = "") -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{action}_{data}'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='menu')
            ]
        ])

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.logger = BotLogger.setup_logging()
        self.db = Database()
        self.user_service = UserService(self.db)
        self.bonus_service = BonusService(self.db)
        self.withdrawal_service = WithdrawalService(self.db)

        self.logger.info("üöÄ Bot initialized successfully")

    def setup_handlers(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("admin", handle_admin_command)) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ handle_admin_command –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (update, context)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ handle_admin_message —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (update, context)
        # –∏ –∏–º–µ–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_admin_message
        ))

        self.logger.info("‚úÖ Handlers configured successfully")

    async def post_init(self, application: Application) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.init_db() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
            self.logger.info("‚úÖ Database initialized")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            bot_info = await application.bot.get_me()
            self.logger.info(f"‚úÖ Bot @{bot_info.username} started successfully")

        except Exception as e:
            self.logger.error(f"‚ùå Error in post_init: {e}", exc_info=True)
            raise

    async def cleanup(self, application: Application) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            if hasattr(self.db, 'session') and self.db.session:
                self.db.session.close()
            self.logger.info("‚úÖ Resources cleaned up (DB session closed)")
        except Exception as e:
            self.logger.error(f"‚ùå Error in cleanup: {e}", exc_info=True)

    async def handle_daily_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            user_id = update.callback_query.from_user.id
            user = self.db.get_user(user_id)

            if not user:
                await update.callback_query.edit_message_text(
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return

            can_claim, time_left = self.bonus_service.can_claim_daily_bonus(user)

            if not can_claim and time_left: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É time_left
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)

                await update.callback_query.answer(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω",
                    show_alert=True
                )
                return
            elif not can_claim: # –°–ª—É—á–∞–π, –µ—Å–ª–∏ time_left is None, —Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏ can_claim=False
                 await update.callback_query.answer("‚è≥ –ë–æ–Ω—É—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
                 return


            if self.bonus_service.claim_daily_bonus(user):
                streak = self._calculate_bonus_streak(user)
                bonus_text = MessageBuilder.build_bonus_message(DAILY_BONUS, user.balance, streak)
                keyboard = KeyboardBuilder.build_back_keyboard('menu')

                await update.callback_query.edit_message_text(
                    bonus_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞", show_alert=True)

        except Exception as e:
            self.logger.error(f"Error in handle_daily_bonus: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞")

    def _calculate_bonus_streak(self, user: User) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª—è "—Å–µ—Ä–∏–∏"
        # –ï—Å–ª–∏ –±–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–∑—è—Ç, user.last_bonus == datetime.now()
        # Streak –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ë–î –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è/—Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à—É –ª–æ–≥–∏–∫—É, –Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å.
        if user.last_bonus:
            # –ß—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å —Å–µ—Ä–∏—é, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_bonus –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            # –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è streak –≤ User.
            # –ò–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ user.bonus_streak: return user.bonus_streak
            return 1 # –ó–ê–ì–õ–£–®–ö–ê. –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—è –≤ –ë–î.
        return 1

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            query = update.callback_query
            user_id = query.from_user.id

            if not self.user_service.is_admin(user_id):
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return

            stats = self.db.get_user_statistics() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.update({
                'total_balance': sum(u.balance for u in self.db.session.query(User).all()),
                'total_withdrawals': sum(u.withdrawals for u in self.db.session.query(User).all()),
                'total_investments': sum(u.total_invested for u in self.db.session.query(User).all()),
                'new_today': self.db.get_new_users_today_count() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            })

            stats_text = MessageBuilder.build_admin_panel_message(stats)
            keyboard = KeyboardBuilder.build_admin_keyboard()

            await query.edit_message_text( # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –±—ã–ª if update.callback_query, –Ω–æ –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ callback
                stats_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            self.logger.error(f"Error in show_admin_panel: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
            if update.message and update.message.chat.type in ['group', 'supergroup']:
                await update.message.reply_text(
                    f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`",
                    parse_mode=ParseMode.MARKDOWN
                )
                return

            user_id = update.effective_user.id
            user_name = update.effective_user.first_name or "–î—Ä—É–≥"
            ref = context.args[0] if context.args else None

            if self.user_service.is_blocked(user_id):
                blocked_text = """üö´ *–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù*

‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.

üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
‚îî –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏

‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""
                if update.message:
                    await update.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
                elif update.callback_query: # –ï—Å–ª–∏ /start –≤—ã–∑–≤–∞–Ω –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'menu')
                    await update.callback_query.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
                    await update.callback_query.answer() # –ó–∞–∫—Ä—ã—Ç—å callback
                return

            user = self.db.get_user(user_id)
            if not user:
                ref_id = int(ref) if ref and ref.isdigit() else None
                user = await self.user_service.create_user(user_id, ref_id)

            if not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id)
                if not is_subscribed:
                    await show_channel_check(update, context)
                    return

            if not user.channel_joined: # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É User –µ—Å—Ç—å –ø–æ–ª–µ channel_joined
                user.channel_joined = True
                self.db.session.commit()

            welcome_text = MessageBuilder.build_welcome_message(user, user_name)
            keyboard = KeyboardBuilder.build_main_keyboard(self.user_service.is_admin(user_id))

            if update.callback_query: # –ï—Å–ª–∏ /start –≤—ã–∑–≤–∞–Ω –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'menu')
                await update.callback_query.edit_message_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            elif update.message:
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in start command: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"""
        try:
            query = update.callback_query
            await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
            user_id = query.from_user.id

            if self.user_service.is_blocked(user_id):
                # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä—è–º–æ –≤ callback alert
                # await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
                # –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
                await query.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
                return

            user = self.db.get_user(user_id)
            if not user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                    reply_markup=KeyboardBuilder.build_back_keyboard('menu') # 'menu' –≤—ã–∑–æ–≤–µ—Ç /start
                )
                return

            if query.data != 'check_subscription' and not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id)
                if not is_subscribed:
                    await show_channel_check(update, context) # show_channel_check –¥–æ–ª–∂–µ–Ω —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å update (query –∏–ª–∏ message)
                    return

            await self._route_callback(update, context, query.data)

        except Exception as e:
            self.logger.error(f"Error in button_handler: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def _route_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∫–æ–º–∞–Ω–¥"""
        user_id = update.effective_user.id

        if data == 'admin_panel' and self.user_service.is_admin(user_id):
            await self.show_admin_panel(update, context)
        elif data == 'admin_stats' and self.user_service.is_admin(user_id):
            await self._show_detailed_stats(update, context)
        elif data == 'balance':
            await show_balance(update, context)
        elif data == 'stats':
            await self._show_user_stats(update, context)
        elif data == 'investments':
            await show_investments(update, context)
        elif data.startswith(('invest_', 'confirm_invest_', 'calc_')):
            await handle_investment_request(update, context)
        elif data == 'withdraw':
            await handle_withdraw_request(update, context)
        elif data.startswith('withdraw_') and data.split('_')[1].isdigit(): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
            amount = int(data.split('_')[1])
            await handle_withdraw_request(update, context, amount=amount) # –ü–µ—Ä–µ–¥–∞–µ–º amount –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        elif data.startswith('payment_'):
            parts = data.split('_')
            if len(parts) == 3 and parts[2].isdigit(): # payment_method_amount
                method, amount_str = parts[1], parts[2]
                amount = int(amount_str)
                await handle_payment_details(update, context, payment_method=method, amount=amount)
            else:
                self.logger.warning(f"Invalid payment callback data: {data}")
                await self._handle_unknown_callback(update, context)
        elif data == 'bonus':
            await self.handle_daily_bonus(update, context)
        elif data == 'referral':
            await show_referral_program(update, context)
        elif data == 'top':
            await self._show_top_users(update, context)
        elif data == 'info':
            await self._show_info(update, context)
        elif data == 'history':
            await self._show_withdrawal_history(update, context)
        elif data == 'menu':
            await self.start(update, context) # 'menu' —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç start
        elif data == 'check_subscription': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
             # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –≤ show_channel_check
             # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –µ–≥–æ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
             is_subscribed = await check_channel_subscription(context, user_id)
             if is_subscribed:
                user = self.db.get_user(user_id)
                if user and not user.channel_joined:
                    user.channel_joined = True
                    self.db.session.commit()
                await self.start(update, context) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
             else:
                await update.callback_query.answer("–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
                # –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –µ—Å–ª–∏ show_channel_check —ç—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
                # await show_channel_check(update, context)
        else:
            await self._handle_unknown_callback(update, context)

    async def _show_user_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)

        if not user:
            await update.callback_query.edit_message_text(
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        stats_text = MessageBuilder.build_stats_message(user)
        keyboard = KeyboardBuilder.build_back_keyboard('menu')

        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

    async def _show_detailed_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ self.db
        stats = self.db.get_user_statistics()
        invest_stats = self.db.get_investments_statistics()

        # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –∫–ª—é—á–µ–π –Ω–µ—Ç
        stats.setdefault('new_today', self.db.get_new_users_today_count())
        stats.setdefault('total_balance', sum(u.balance for u in self.db.session.query(User).all()))
        stats.setdefault('total_withdrawals', sum(u.withdrawals for u in self.db.session.query(User).all()))
        # 'subscribed_users' - –µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –µ—Å—Ç—å
        # stats.setdefault('subscribed_users', self.db.get_subscribed_users_count())
        
        invest_stats.setdefault('total_investments', sum(u.total_invested for u in self.db.session.query(User).all()))
        # invest_stats.setdefault('total_profit_paid', ...)
        # invest_stats.setdefault('active_investments', ...)

        stats_text = f"""üìä *–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{stats.get('total_users', 0):,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats.get('active_users', 0):,}*
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: *{stats.get('blocked_users', 0):,}*
‚îú –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{stats.get('new_today', 0):,}*
‚îî –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–Ω–∞–ª: *{stats.get('subscribed_users', 'N/A'):,}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{format_currency(stats.get('total_balance', 0))}*
‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(stats.get('total_withdrawals', 0))}*
‚îú –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(invest_stats.get('total_investments', 0))}*
‚îú –ü—Ä–∏–±—ã–ª—å –≤—ã–ø–ª–∞—á–µ–Ω–∞: *{format_currency(invest_stats.get('total_profit_paid', 0))}*
‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{invest_stats.get('active_investments', 0):,}*

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: *{stats.get('pending_withdrawals', 0):,}*
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: *{stats.get('total_referrals', 0):,}*
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{format_currency(stats.get('avg_earnings', 0))}*

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"""

        keyboard = KeyboardBuilder.build_back_keyboard('admin_panel')
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

    async def _show_top_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        try:
            top_users_db = self.db.session.query(User)\
                .order_by(User.total_earned.desc(), User.balance.desc())\
                .limit(10)\
                .all()

            top_text = "üèÜ *–¢–û–ü-10 –£–°–ü–ï–®–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
            medals = ["ü•á", "ü•à", "ü•â"] + [f"{i}Ô∏è‚É£" for i in range(4, 11)]

            for i, user_db in enumerate(top_users_db):
                name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_db.user_id}" # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ
                try:
                    chat = await context.bot.get_chat(user_db.user_id)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º first_name –∏–ª–∏ username, –µ—Å–ª–∏ –µ—Å—Ç—å
                    display_name = chat.first_name or chat.username or f"ID {user_db.user_id}"
                    name = display_name[:20] + "..." if len(display_name) > 20 else display_name
                except TelegramError as e: # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    self.logger.warning(f"Could not get chat for user {user_db.user_id}: {e}")
                except Exception as e:
                    self.logger.error(f"Unexpected error getting chat for user {user_db.user_id}: {e}")


                refs_count = len(user_db.referrals)
                investments_count = len([inv for inv in user_db.investments if hasattr(inv, 'is_finished') and not inv.is_finished])

                top_text += f"{medals[i]} *{name}*\n"
                top_text += f"‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user_db.total_earned)}*\n"
                top_text += f"‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{refs_count}*\n"
                top_text += f"‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{investments_count}*\n\n"

            if not top_users_db:
                top_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."

            top_text += "\nüí° *–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Ç–æ–ø–∞! –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ.*"
            keyboard = KeyboardBuilder.build_back_keyboard('menu')

            if update.callback_query:
                await update.callback_query.edit_message_text(top_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            elif update.message: # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /top –±—ã–ª–∞ –±—ã
                await update.message.reply_text(top_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            self.logger.error(f"Error in _show_top_users: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")

    async def _show_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"""
        info_text = MessageBuilder.build_info_message()
        keyboard = KeyboardBuilder.build_back_keyboard('menu')

        if update.callback_query:
            await update.callback_query.edit_message_text(info_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        elif update.message:
             await update.message.reply_text(info_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)


    async def _show_withdrawal_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤"""
        try:
            user_id = update.effective_user.id
            user = self.db.get_user(user_id)
            if not user: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É
                 await self._send_error_message(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                 return

            # –í WithdrawalRequest user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            withdrawals = self.db.session.query(WithdrawalRequest)\
                .filter(WithdrawalRequest.user.has(user_id=user.user_id)) # –§–∏–ª—å—Ç—Ä –ø–æ telegram_id —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞
                .order_by(WithdrawalRequest.date.desc())\
                .limit(10)\
                .all()

            if not withdrawals:
                history_text = f"""üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í*

‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW:,}‚ÇΩ
üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"""
            else:
                history_text = "üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í*\n\n"
                total_requested = sum(w.amount for w in withdrawals)
                approved_count = len([w for w in withdrawals if w.status == 'approved'])

                history_text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):*\n"
                history_text += f"‚îú –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: *{len(withdrawals)}*\n"
                history_text += f"‚îú –û–¥–æ–±—Ä–µ–Ω–æ: *{approved_count}*\n"
                history_text += f"‚îî –°—É–º–º–∞ –∑–∞—è–≤–æ–∫: *{format_currency(total_requested)}*\n\n"

                for w in withdrawals: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 10 (–∏–ª–∏ –º–µ–Ω—å—à–µ)
                    status_emoji = {'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå'}.get(w.status, '‚ùì')
                    status_text = {'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 'approved': '–û–¥–æ–±—Ä–µ–Ω–∞', 'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}.get(w.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                    history_text += f"üÜî *–ó–∞—è–≤–∫–∞ #{w.id}*\n"
                    history_text += f"‚îú –°—É–º–º–∞: *{format_currency(w.amount)}*\n"
                    history_text += f"‚îú –°–∏—Å—Ç–µ–º–∞: *{w.method.upper()}*\n"
                    history_text += f"‚îú –î–∞—Ç–∞: {w.date.strftime('%d.%m.%Y %H:%M')}\n"
                    history_text += f"‚îî –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n\n"

            keyboard = KeyboardBuilder.build_back_keyboard('menu')
            if update.callback_query:
                await update.callback_query.edit_message_text(history_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            elif update.message:
                await update.message.reply_text(history_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            self.logger.error(f"Error in _show_withdrawal_history: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

    async def _handle_unknown_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∫–æ–º–∞–Ω–¥"""
        await update.callback_query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
        # –ú–æ–∂–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å start, –∞ –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.
        # await self.start(update, context)

    async def _send_error_message(self, update: Update, error_text: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_message = f"‚ùå {error_text}\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            keyboard = KeyboardBuilder.build_back_keyboard('menu')

            if update.callback_query:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if update.callback_query.message:
                    await update.callback_query.edit_message_text(
                        error_message,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else: # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    await update.callback_query.answer(error_text, show_alert=True)
            elif update.message:
                await update.message.reply_text(
                    error_message,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except TelegramError as te: # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—à–∏–±–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            self.logger.error(f"TelegramError sending error message: {te}")
        except Exception as e:
            self.logger.error(f"Error sending error message: {e}", exc_info=True)

# --- –ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ TelegramBot ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = None
    cron_server = None
    telegram_bot = None # –û–±—ä—è–≤–∏–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ finally

    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        telegram_bot = TelegramBot() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.settings
        if not TOKEN:
            telegram_bot.logger.critical("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config/settings.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        telegram_bot.setup_handlers(application)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—É–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        application.post_init = telegram_bot.post_init
        application.post_shutdown = telegram_bot.cleanup
        
        app_url = os.getenv('RENDER_EXTERNAL_URL')
        
        telegram_bot.logger.info("üöÄ Starting telegram bot...")
        
        if app_url and os.getenv('RENDER'):
            telegram_bot.logger.info("üì° Starting in webhook mode for Render...")
            
            port_str = os.getenv('PORT')
            if not port_str:
                telegram_bot.logger.critical("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ Render!")
                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ —ç—Ç–æ –ø–ª–æ—Ö–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è Render
                # port = 8000 # –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –î–õ–Ø RENDER
                return # –õ—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ PORT –Ω–µ –∑–∞–¥–∞–Ω
            try:
                port = int(port_str)
            except ValueError:
                telegram_bot.logger.critical(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è PORT: {port_str}")
                return

            webhook_path = TOKEN # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
            full_webhook_url = f"{app_url.rstrip('/')}/{webhook_path}"

            telegram_bot.logger.info(f"Configuring webhook. URL: {full_webhook_url}, Listen: 0.0.0.0:{port}, Path: /{webhook_path}")
            
            # –ó–∞–ø—É—Å–∫ CronServer
            try:
                if app_url: # CronServer –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å app_url
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ CronServer - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º —Å–ø–æ—Å–æ–±–æ–º
                    cron_server = CronServer(app_url) 
                    await cron_server.start() # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ start() –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π
                    telegram_bot.logger.info("‚è∞ Cron server started")
            except Exception as e:
                telegram_bot.logger.warning(f"‚ö†Ô∏è Failed to start cron server: {e}", exc_info=True)
            
            # application.run_webhook() —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤–µ–±—Ö—É–∫ —Å Telegram –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            # –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
            await application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=webhook_path,
                webhook_url=full_webhook_url,
                drop_pending_updates=True
                # secret_token="YOUR_ACTUAL_SECRET_TOKEN" # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å X-Telegram-Bot-Api-Secret-Token
            )
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ run_webhook, —ç—Ç–æ—Ç –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            # PTB —Å–∞–º–∞ –≤—ã–≤–µ–¥–µ—Ç –ª–æ–≥–∏ –æ –∑–∞–ø—É—Å–∫–µ uvicorn
            
        else:
            telegram_bot.logger.info("üîÑ Starting in polling mode (local development)...")
            
            telegram_bot.logger.info("Attempting to delete any existing webhook...")
            await application.bot.delete_webhook(drop_pending_updates=True)
            telegram_bot.logger.info("Webhook deleted (if existed).")

            try:
                if app_url: # –ï—Å–ª–∏ –µ—Å—Ç—å URL –¥–ª—è –ø–∏–Ω–≥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å ngrok)
                    cron_server = CronServer(app_url)
                    await cron_server.start()
                    telegram_bot.logger.info("‚è∞ Cron server started (local)")
            except Exception as e:
                telegram_bot.logger.warning(f"‚ö†Ô∏è Failed to start cron server (local): {e}", exc_info=True)
            
            telegram_bot.logger.info("Starting polling...")
            await application.run_polling(
                poll_interval=1.0, # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                drop_pending_updates=True
            )
        
    except KeyboardInterrupt:
        if telegram_bot: telegram_bot.logger.info("üõë Bot stopped by user (KeyboardInterrupt)")
        else: print("üõë Bot stopped by user (KeyboardInterrupt) - logger not initialized")
    except ValueError as ve: 
        if telegram_bot: telegram_bot.logger.critical(f"üí• Critical configuration error: {ve}", exc_info=True)
        else: print(f"üí• Critical configuration error: {ve}")
    except Exception as e:
        if telegram_bot: telegram_bot.logger.critical(f"üí• Critical error in main: {e}", exc_info=True)
        else: print(f"üí• Critical error in main: {e}")
        
        if application and telegram_bot and ADMIN_IDS:
            error_message = f"""üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê*

–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:
`{type(e).__name__}: {str(e)}`

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."""
            for admin_id in ADMIN_IDS:
                try:
                    await application.bot.send_message(chat_id=admin_id, text=error_message, parse_mode=ParseMode.MARKDOWN)
                except Exception as send_err:
                    if telegram_bot: telegram_bot.logger.error(f"Failed to send critical error notification to admin {admin_id}: {send_err}")
    finally:
        if cron_server and hasattr(cron_server, 'stop') and callable(cron_server.stop):
            if telegram_bot: telegram_bot.logger.info("Stopping cron server...")
            try:
                await cron_server.stop() # –ï—Å–ª–∏ stop –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            except TypeError: # –ï—Å–ª–∏ stop –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
                 cron_server.stop()
            except Exception as e_cron_stop:
                if telegram_bot: telegram_bot.logger.error(f"Error stopping cron server: {e_cron_stop}")

        # PTB v20+ application.stop() –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–º API –∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ run_polling/run_webhook
        # if application and hasattr(application, 'stop') and application.running:
        #      if telegram_bot: telegram_bot.logger.info("Stopping application...")
        #      await application.stop()
        if telegram_bot: telegram_bot.logger.info("Bot shutdown process finished.")


if __name__ == '__main__':
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TOKEN –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (ADMIN_IDS, DATABASE_URL –∏ —Ç.–¥.)
    # –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç `from config.settings import *`
    # –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∑–¥–µ—Å—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # from dotenv import load_dotenv
    # load_dotenv()
    # TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã TOKEN –±—Ä–∞–ª—Å—è –∏–∑ .env
    # if not TOKEN:
    #     print("TELEGRAM_BOT_TOKEN environment variable not set!")
    #     exit(1)
    # ADMIN_IDS = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",") if admin_id.strip()]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è TOKEN (—É–∂–µ –µ—Å—Ç—å –≤ main, –Ω–æ –º–æ–∂–Ω–æ –∏ –∑–¥–µ—Å—å –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞)
    if not TOKEN:
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config/settings.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        exit(1)
    if not ADMIN_IDS:
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config/settings.py –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        # –ú–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—É—Å–∫ –±–µ–∑ ADMIN_IDS, –µ—Å–ª–∏ —ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º–æ
        # exit(1) 

    asyncio.run(main())
Use code with caution.
Python
–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:
start_webhook —É–¥–∞–ª–µ–Ω–∞: –ï—ë —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤ main() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º application.run_webhook().
main() —Ñ—É–Ω–∫—Ü–∏—è:
Webhook Mode (Render):
–ü–æ–ª—É—á–∞–µ—Ç PORT –∏–∑ os.getenv('PORT'). –í–∞–∂–Ω–æ: Render –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, –≤–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞ Render, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ Background Worker, –∞ –Ω–µ Web Service).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç application.run_webhook(...). –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç webhook –≤ Telegram –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.
listen="0.0.0.0": –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö/PaaS.
url_path=TOKEN: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–∞–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞. –≠—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.
Polling Mode (Local):
–Ø–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ —Å –ø–æ–º–æ—â—å—é await application.bot.delete_webhook(drop_pending_updates=True).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç application.run_polling(...).
CronServer: –ó–∞–ø—É—Å–∫ CronServer –æ—Å—Ç–∞–≤–ª–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–≥–æ –º–µ—Ç–æ–¥ start() —è–≤–ª—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º (async def start) –∏–ª–∏ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—É –±–æ—Ç–∞. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è stop().
–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
telegram_bot: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramBot —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ try –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ except –∏ finally.
if __name__ == '__main__'::
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python-—Å–∫—Ä–∏–ø—Ç–∞.
–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è TOKEN –∏ ADMIN_IDS (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ config.settings). –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ config.settings: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (TOKEN, ADMIN_IDS, REFERRAL_BONUS, DAILY_BONUS, MIN_WITHDRAW, CHANNEL_LINK –∏ —Ç.–¥.) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ config/settings.py –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ from config.settings import *.
–ú–µ–ª–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–¥–µ –±–æ—Ç–∞:
–í WithdrawalService.create_withdrawal_request: user_id=user.id (–µ—Å–ª–∏ user.id —ç—Ç–æ PK –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ User, –∞ user.user_id —ç—Ç–æ Telegram ID). –£—Ç–æ—á–Ω–∏—Ç–µ —ç—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π –º–æ–¥–µ–ª—å—é. –ï—Å–ª–∏ WithdrawalRequest —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ Telegram ID, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å user_id=user.user_id (–∏ –ø–æ–ª–µ –≤ WithdrawalRequest –¥–æ–ª–∂–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏–ª–∏ –±—ã—Ç—å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º –Ω–∞ –ø–æ–ª–µ —Å Telegram ID –≤ User). –°—É–¥—è –ø–æ filter(WithdrawalRequest.user.has(user_id=user.user_id)) –≤ _show_withdrawal_history, –≤–∞—à–∞ –º–æ–¥–µ–ª—å WithdrawalRequest –∏–º–µ–µ—Ç —Å–≤—è–∑—å user, –∏ —É —ç—Ç–æ–π user –µ—Å—Ç—å –ø–æ–ª–µ user_id, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è Telegram ID. –¢–æ–≥–¥–∞ –≤ create_withdrawal_request –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç user, –∞ SQLAlchemy —Å–∞–º–∞ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º: withdrawal = WithdrawalRequest(user=user, ...) –∏–ª–∏ user_id=user.id –µ—Å–ª–∏ FK –Ω–∞ User.id. –£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π SQLAlchemy. –Ø –æ—Å—Ç–∞–≤–∏–ª user_id=user.id –∫–∞–∫ –±–æ–ª–µ–µ —Ç–∏–ø–∏—á–Ω–æ–µ –¥–ª—è PK, –Ω–æ filter_by(user_id=user.user_id) –≤ _show_withdrawal_history —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ. –Ø –∏–∑–º–µ–Ω–∏–ª –µ–≥–æ –Ω–∞ filter(WithdrawalRequest.user.has(user_id=user.user_id)) —á—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É —Å–≤—è–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
–í _calculate_bonus_streak: –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—á–∏—Ç–∞—Ç—å "—Å–µ—Ä–∏—é". –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–µ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å/—Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–≥–æ. –ü–æ–∫–∞ —á—Ç–æ —è –æ—Å—Ç–∞–≤–∏–ª –∑–∞–≥–ª—É—à–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é 1.
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ self.db (–Ω–∞–ø—Ä–∏–º–µ—Ä, get_user_statistics, get_investments_statistics, get_new_users_today_count) –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ Database.
–í _show_top_users –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ TelegramError –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.
–í _route_callback –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è data.startswith('withdraw_') –∏ data.startswith('payment_') –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞.
–í handle_daily_bonus –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ time_left –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.
–≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–∞ Render, —Ç–∞–∫ –∏ –ª–æ–∫–∞–ª—å–Ω–æ. –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –ª–æ–≥–∏–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤–∞—à–µ–≥–æ Database –∫–ª–∞—Å—Å–∞.
