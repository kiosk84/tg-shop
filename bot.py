import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (TOKEN, ADMIN_IDS, etc.) –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ config.settings.py
# –∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ bot.py
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ bot.py –≤ –∫–æ—Ä–Ω–µ, —Ç–æ config/settings.py
try:
    from config.settings import *
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.settings. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "")
    ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(",") if admin_id.strip().isdigit()] if ADMIN_IDS_STR else []
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    REFERRAL_BONUS = int(os.getenv("REFERRAL_BONUS", 50)) 
    DAILY_BONUS = int(os.getenv("DAILY_BONUS", 10)) 
    MIN_WITHDRAW = int(os.getenv("MIN_WITHDRAW", 100)) 
    CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/your_channel_username") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    CHANNEL_ID = os.getenv("CHANNEL_ID") # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)
    
    if not TOKEN:
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ config.settings, –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        exit(1)
    if not ADMIN_IDS:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ADMIN_IDS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    if not CHANNEL_ID:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


from utils.database import Database
from utils.cron_server import CronServer # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –∫–ª–∞—Å—Å —Å—É—â–µ—Å—Ç–≤—É—é—Ç
from utils.helpers import format_currency
from models.user import User, WithdrawalRequest, Investment # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# logger = logging.getLogger(__name__) # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ BotLogger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π –≤–µ—Ä–Ω—ã
from handlers.user import check_channel_subscription, show_channel_check, show_balance
from handlers.admin import handle_admin_command, handle_admin_message
from handlers.withdraw import (
    handle_withdraw_request,
    # notify_admins_withdrawal, # –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
    handle_payment_details
)
from handlers.investments import show_investments, handle_investment_request
from handlers.referral import show_referral_program, handle_referral_bonus


class BotLogger:
    @staticmethod
    def setup_logging():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO, # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            handlers=[
                logging.FileHandler('bot.log', encoding='utf-8'), # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
                logging.StreamHandler() # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
            ]
        )
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º "—à—É–º–Ω—ã–µ"
        logging.getLogger("httpx").setLevel(logging.WARNING)
        logging.getLogger("telegram.ext").setLevel(logging.INFO)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return logging.getLogger("TelegramBotApp")

class UserService:
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(self.__class__.__name__) # –õ–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞

    def is_admin(self, user_id: int) -> bool:
        return user_id in ADMIN_IDS

    def is_blocked(self, user_id: int) -> bool:
        user = self.db.get_user(user_id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –∏–ª–∏ None
        return bool(user and user.is_blocked)

    async def create_user(self, user_id: int, ref_id: Optional[int] = None) -> User:
        try:
            user = self.db.create_user(user_id) # create_user –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç User
            if ref_id and ref_id != user_id:
                referrer = self.db.get_user(ref_id)
                # get_referral –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å
                if referrer and not self.db.get_referral(referrer.id, user.id): # –ò—Å–ø–æ–ª—å–∑—É–µ–º PK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    self.db.create_referral(referrer.id, user.id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º PK
                    referrer.balance += REFERRAL_BONUS
                    referrer.total_earned += REFERRAL_BONUS
                    self.db.session.commit()
                    self.logger.info(f"User {user_id} (ID: {user.id}) joined via referral link from {ref_id} (ID: {referrer.id}). Bonus {REFERRAL_BONUS} to referrer.")
            return user
        except Exception as e:
            self.logger.error(f"Error creating user {user_id} with ref {ref_id}: {e}", exc_info=True)
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å None/—Å–ø–µ—Ü.–æ–±—ä–µ–∫—Ç
            raise # –ò–ª–∏ return None, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

class BonusService:
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(self.__class__.__name__)

    def can_claim_daily_bonus(self, user: User) -> tuple[bool, Optional[timedelta]]:
        if not user.last_bonus: # –ï—Å–ª–∏ –±–æ–Ω—É—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—Ä–∞–ª—Å—è
            return True, None
        now = datetime.now()
        time_since_last = now - user.last_bonus
        if time_since_last >= timedelta(days=1):
            return True, None
        next_bonus_time_exact = user.last_bonus + timedelta(days=1)
        time_left = next_bonus_time_exact - now
        return False, time_left

    def claim_daily_bonus(self, user: User) -> bool:
        try:
            can_claim, _ = self.can_claim_daily_bonus(user)
            if not can_claim:
                self.logger.info(f"User {user.user_id} tried to claim bonus too early.")
                return False
            user.balance += DAILY_BONUS
            user.total_earned += DAILY_BONUS
            user.last_bonus = datetime.now()
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è user.bonus_streak, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            self.db.session.commit()
            self.logger.info(f"Daily bonus {DAILY_BONUS} claimed by user {user.user_id}. New balance: {user.balance}")
            return True
        except Exception as e:
            self.logger.error(f"Error claiming daily bonus for user {user.user_id}: {e}", exc_info=True)
            self.db.session.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return False

class WithdrawalService:
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(self.__class__.__name__)

    def validate_withdrawal(self, user: User, amount: int) -> Dict[str, Any]:
        if amount < MIN_WITHDRAW:
            return {'valid': False, 'error': f'üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {format_currency(MIN_WITHDRAW)}'}
        if amount > user.balance:
            return {'valid': False, 'error': f'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {format_currency(amount)}\n–î–æ—Å—Ç—É–ø–Ω–æ: {format_currency(user.balance)}'}
        return {'valid': True, 'error': None} # –î–æ–±–∞–≤–∏–ª error: None –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

    def create_withdrawal_request(self, user_obj: User, amount: int, method: str, details: str) -> Optional[WithdrawalRequest]:
        try:
            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User, –∞ –Ω–µ telegram_id
            validation = self.validate_withdrawal(user_obj, amount)
            if not validation['valid']:
                self.logger.warning(f"Withdrawal validation failed for user {user_obj.user_id}: {validation.get('error')}")
                # –ú–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # return validation.get('error')
                return None 

            # WithdrawalRequest.user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å FK –Ω–∞ User.id (PK —Ç–∞–±–ª–∏—Ü—ã users)
            withdrawal = WithdrawalRequest(
                user_id=user_obj.id, 
                amount=amount,
                method=method,
                details=details,
                date=datetime.now(),
                status='pending'
            )
            user_obj.balance -= amount
            self.db.session.add(withdrawal)
            self.db.session.commit()
            self.logger.info(f"Withdrawal request created: user_id={user_obj.user_id} (User PK: {user_obj.id}), amount={amount}, method={method}")
            return withdrawal
        except Exception as e:
            self.logger.error(f"Error creating withdrawal request for user {user_obj.user_id}: {e}", exc_info=True)
            self.db.session.rollback()
            return None

    def process_withdrawal(self, withdrawal_id: int, approved: bool, admin_id: int) -> bool:
        try:
            withdrawal = self.db.session.query(WithdrawalRequest).get(withdrawal_id)
            if not withdrawal:
                self.logger.warning(f"Withdrawal request ID {withdrawal_id} not found for processing.")
                return False
            
            user_obj = withdrawal.user # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç User (—á–µ—Ä–µ–∑ backref/relationship)

            withdrawal.status = 'approved' if approved else 'rejected'
            withdrawal.processed_date = datetime.now()
            withdrawal.processed_by = admin_id # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ telegram_id –∞–¥–º–∏–Ω–∞

            if approved:
                user_obj.withdrawals += withdrawal.amount # –£ User –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ withdrawals
                self.logger.info(f"Withdrawal ID {withdrawal_id} (User: {user_obj.user_id}) approved by admin {admin_id}.")
            else:
                user_obj.balance += withdrawal.amount 
                self.logger.info(f"Withdrawal ID {withdrawal_id} (User: {user_obj.user_id}) rejected by admin {admin_id}. Amount {withdrawal.amount} returned to user.")
            
            self.db.session.commit()
            return True
        except Exception as e:
            self.logger.error(f"Error processing withdrawal {withdrawal_id}: {e}", exc_info=True)
            self.db.session.rollback()
            return False

class MessageBuilder:
    @staticmethod
    def build_welcome_message(user: User, user_name: str) -> str:
        if user.total_earned >= 1000: status = "üëë VIP"
        elif user.total_earned >= 500: status = "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif user.total_earned >= 100: status = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else: status = "ü•â –ù–æ–≤–∏—á–æ–∫"
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user.referrals —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º/–∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
        referrals_count = len(user.referrals) if hasattr(user, 'referrals') and user.referrals is not None else 0

        return f"""üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

{status} ‚Ä¢ ID: `{user.user_id}`

üíé *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*
‚îî –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{referrals_count}*

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"""

    @staticmethod
    def build_stats_message(user: User) -> str:
        ref_count = len(user.referrals) if hasattr(user, 'referrals') else 0
        ref_earnings = sum(r.bonus_paid for r in user.referrals if hasattr(r, 'bonus_paid')) if hasattr(user, 'referrals') else 0
        
        investments = user.investments if hasattr(user, 'investments') else []
        invest_earnings = sum(i.total_profit for i in investments if hasattr(i, 'total_profit'))
        active_investments = len([i for i in investments if hasattr(i, 'is_finished') and not i.is_finished])
        
        total_invested = user.total_invested if hasattr(user, 'total_invested') else 0
        roi = (user.total_earned / max(total_invested, 1)) * 100 if total_invested > 0 else 0
        
        return f"""üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: *{format_currency(user.withdrawals)}*
‚îî ROI: *{roi:.1f}%*

üë• *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{ref_count}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{format_currency(ref_earnings)}*
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: *{format_currency(ref_earnings / max(ref_count, 1))}*

üìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚îú –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(total_invested)}*
‚îú –ü—Ä–∏–±—ã–ª—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{format_currency(invest_earnings)}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{active_investments}*
‚îî –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{len(investments) - active_investments}*

üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.join_date.strftime('%d.%m.%Y')}
‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {user.last_bonus.strftime('%d.%m.%Y %H:%M') if user.last_bonus else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}"""

    @staticmethod
    def build_admin_panel_message(stats: Dict[str, Any]) -> str:
        # –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ stats
        return f"""üëë *–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{stats.get('total_users', 0):,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: *{stats.get('active_users_24h', 0):,}* 
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: *{stats.get('blocked_users', 0):,}*
‚îî –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{stats.get('new_today', 0):,}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{format_currency(stats.get('total_balance_all_users', 0))}*
‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(stats.get('total_withdrawals_approved', 0))}*
‚îî –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(stats.get('total_invested_all_users', 0))}*

‚öôÔ∏è *–ó–∞—è–≤–∫–∏:*
‚îú –ù–∞ –≤—ã–≤–æ–¥ (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏): *{stats.get('pending_withdrawals_count',0):,}*

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    @staticmethod
    def build_bonus_message(amount: int, balance: int, streak: int = 1) -> str:
        return f"""üéÅ *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–û–õ–£–ß–ï–ù!*

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: *{format_currency(amount)}*
üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{format_currency(balance)}*
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: *{streak}* (–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–µ—Ä–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.
üí° –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏!"""

    @staticmethod
    def build_info_message() -> str:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ REFERRAL_BONUS, DAILY_BONUS, MIN_WITHDRAW, CHANNEL_LINK –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        return f"""üí° *–ö–ê–ö –ó–ê–†–ê–ë–û–¢–ê–¢–¨ –í –ë–û–¢–ï*

üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*

1Ô∏è‚É£ *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*
‚îú –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ *{format_currency(REFERRAL_BONUS)}* –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞.
‚îú –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ({CHANNEL_LINK}) –∏ –ø—Ä–æ—è–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
‚îî –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!

2Ô∏è‚É£ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã*
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ *{format_currency(DAILY_BONUS)}* –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
‚îú –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.
‚îú (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–µ—Ä–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.

3Ô∏è‚É£ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã* (–ü—Ä–∏–º–µ—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
‚îú üå± –°—Ç–∞—Ä—Ç–µ—Ä: –æ—Ç 100‚ÇΩ ‚Ä¢ 1.2% –≤ –¥–µ–Ω—å
‚îú üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç: –æ—Ç 1,000‚ÇΩ ‚Ä¢ 1.8% –≤ –¥–µ–Ω—å  
‚îú üöÄ –ü—Ä–µ–º–∏—É–º: –æ—Ç 5,000‚ÇΩ ‚Ä¢ 2.5% –≤ –¥–µ–Ω—å
‚îî üëë VIP: –æ—Ç 20,000‚ÇΩ ‚Ä¢ 3.5% –≤ –¥–µ–Ω—å

4Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤*
‚îú ü•â –ù–æ–≤–∏—á–æ–∫: 0 - 99‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•à –ê–∫—Ç–∏–≤–Ω—ã–π: 100 - 499‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: 500 - 999‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îî üëë VIP: 1,000‚ÇΩ+ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:*
‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: *{format_currency(MIN_WITHDRAW)}*
‚îú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: –ö–∞—Ä—Ç–∞, QIWI, –ÆMoney, –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (USDT TRC20).
‚îú –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
‚îî –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: 0% (–º—ã –ø–æ–∫—Ä—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã).

üéØ *–°–æ–≤–µ—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –±–æ–Ω—É—Å–æ–º.
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: {CHANNEL_LINK}"""

class KeyboardBuilder:
    @staticmethod
    def build_main_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
        keyboard_buttons = [
            [InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å", callback_data='balance'), InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üöÄ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='investments'), InlineKeyboardButton("üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã", callback_data='referral')],
            [InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'), InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='bonus')],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='top'), InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='info')],
            [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK), InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')]
        ]
        if is_admin:
            keyboard_buttons.append([InlineKeyboardButton("üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨", callback_data='admin_panel')])
        return InlineKeyboardMarkup(keyboard_buttons)

    @staticmethod
    def build_admin_keyboard() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'), InlineKeyboardButton("üë§ –£–ø—Ä. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users_manage')],
            [InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'), InlineKeyboardButton("‚úâÔ∏è –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='admin_send_to_user')],
            [InlineKeyboardButton("üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data='admin_withdrawal_requests'), InlineKeyboardButton("üìà –£–ø—Ä. –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", callback_data='admin_investments_manage')],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_user_block'), InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_user_unblock')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data='admin_bot_settings'), InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
        ]) # –ò–∑–º–µ–Ω–∏–ª callback_data –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏

    @staticmethod
    def build_payment_keyboard(amount: int) -> InlineKeyboardMarkup: # –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞ (RUB)", callback_data=f'req_withdraw_card_{amount}'), InlineKeyboardButton("ü•ù QIWI (RUB)", callback_data=f'req_withdraw_qiwi_{amount}')],
            [InlineKeyboardButton("üíõ –ÆMoney (RUB)", callback_data=f'req_withdraw_ymoney_{amount}'), InlineKeyboardButton("‚Çø USDT (TRC20)", callback_data=f'req_withdraw_usdt_{amount}')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ (–∫ —Å—É–º–º–µ)", callback_data='withdraw')] # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É/–≤–≤–æ–¥—É —Å—É–º–º—ã
        ])

    @staticmethod
    def build_back_keyboard(callback_data: str = 'menu') -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=callback_data)]])

    @staticmethod
    def build_confirmation_keyboard(action_prefix: str, item_id: Any = "", extra_data: str = "") -> InlineKeyboardMarkup:
        # action_prefix: –Ω–∞–ø—Ä–∏–º–µ—Ä, 'confirm_withdrawal_approve'
        # item_id: ID –∑–∞—è–≤–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç.–¥.
        # extra_data: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        confirm_cb = f"{action_prefix}_{item_id}"
        if extra_data:
            confirm_cb += f"_{extra_data}"
            
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_cb),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')] # –∏–ª–∏ 'menu' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ])

class TelegramBot:
    def __init__(self):
        # –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main() –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TelegramBot,
        # –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ.
        self.logger = logging.getLogger("TelegramBotApp") 
        self.db = Database() 
        self.user_service = UserService(self.db)
        self.bonus_service = BonusService(self.db)
        self.withdrawal_service = WithdrawalService(self.db)
        self.logger.info("üöÄ TelegramBot instance and its components initialized.")

    def setup_handlers(self, application: Application) -> None:
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("admin", handle_admin_command)) # handle_admin_command –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å async
        application.add_handler(CallbackQueryHandler(self.button_handler))
        # handle_admin_message –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å async –∏ –∏–º–µ—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message)) 
        self.logger.info("‚úÖ Command and message handlers configured.")

    async def post_init(self, application: Application) -> None:
        try:
            self.db.init_db() # –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            self.logger.info("‚úÖ Database schema checked/initialized (post_init).")
            bot_info = await application.bot.get_me()
            self.logger.info(f"‚úÖ Bot @{bot_info.username} is alive and running (post_init complete).")
        except Exception as e:
            self.logger.error(f"‚ùå Critical error during post_init: {e}", exc_info=True)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –±–æ—Ç —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            # –ù–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ë–î, —Ç–æ –º–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            raise # –í–∞–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã PTB –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–±–æ–π –∑–∞–ø—É—Å–∫–∞

    async def cleanup(self, application: Application) -> None:
        try:
            if hasattr(self.db, 'session') and self.db.session and hasattr(self.db.session, 'close'):
                self.db.session.close()
                self.logger.info("‚úÖ Database session closed successfully during cleanup.")
        except Exception as e:
            self.logger.error(f"‚ùå Error closing database session during cleanup: {e}", exc_info=True)
        self.logger.info("üßº Bot cleanup process finished.")


    async def handle_daily_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        self.logger.debug(f"User {user_id} attempting to claim daily bonus.")
        try:
            user = self.db.get_user(user_id)
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.", parse_mode=ParseMode.MARKDOWN)
                return

            can_claim, time_left = self.bonus_service.can_claim_daily_bonus(user)
            if not can_claim:
                if time_left:
                    hours = int(time_left.total_seconds() // 3600)
                    minutes = int((time_left.total_seconds() % 3600) // 60)
                    await query.answer(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω.", show_alert=True)
                else: 
                    await query.answer("‚è≥ –ë–æ–Ω—É—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return

            if self.bonus_service.claim_daily_bonus(user):
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è streak (—Å–µ—Ä–∏–∏) –ø–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1
                streak = self._calculate_bonus_streak(user) 
                bonus_text = MessageBuilder.build_bonus_message(DAILY_BONUS, user.balance, streak)
                await query.edit_message_text(bonus_text, reply_markup=KeyboardBuilder.build_back_keyboard('menu'), parse_mode=ParseMode.MARKDOWN)
            else:
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–≥–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
        except Exception as e:
            self.logger.error(f"Error in handle_daily_bonus for user {user_id}: {e}", exc_info=True)
            await self._send_error_message(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.")

    def _calculate_bonus_streak(self, user: User) -> int:
        # –ó–ê–ì–õ–£–®–ö–ê. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ—Ä–∏–∏ –¥–Ω–µ–π:
        # 1. User –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ `bonus_streak` (int) –∏ `last_bonus_claim_date` (date).
        # 2. –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–∑—è—Ç–∏–∏ –±–æ–Ω—É—Å–∞:
        #    –ï—Å–ª–∏ `datetime.date.today() == user.last_bonus_claim_date + timedelta(days=1)`:
        #        `user.bonus_streak += 1`
        #    –ï—Å–ª–∏ `datetime.date.today() > user.last_bonus_claim_date + timedelta(days=1)` (–ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–Ω—å):
        #        `user.bonus_streak = 1` (—Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏)
        #    –ò–Ω–∞—á–µ (–ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å –∏–ª–∏ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ can_claim_daily_bonus):
        #        `user.bonus_streak = 1`
        #    `user.last_bonus_claim_date = datetime.date.today()`
        #    `self.db.session.commit()`
        self.logger.debug(f"Calculating bonus streak for user {user.user_id} (current logic is a placeholder, returns 1).")
        return 1 

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        self.logger.debug(f"Admin panel requested by user {user_id}.")
        try:
            if not self.user_service.is_admin(user_id):
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.", show_alert=True)
                return

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            # –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º self.db –∏–ª–∏ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å
            stats_data = {
                'total_users': self.db.session.query(User).count(),
                'active_users_24h': self.db.get_active_users_count_24h() if hasattr(self.db, 'get_active_users_count_24h') else 0,
                'blocked_users': self.db.session.query(User).filter_by(is_blocked=True).count(),
                'new_today': self.db.get_new_users_today_count() if hasattr(self.db, 'get_new_users_today_count') else 0,
                'total_balance_all_users': sum(u.balance for u in self.db.session.query(User.balance).all()) or 0,
                'total_withdrawals_approved': sum(w.amount for w in self.db.session.query(WithdrawalRequest.amount).filter_by(status='approved').all()) or 0,
                'total_invested_all_users': sum(u.total_invested for u in self.db.session.query(User.total_invested).all()) or 0,
                'pending_withdrawals_count': self.db.session.query(WithdrawalRequest).filter_by(status='pending').count()
            }
            
            stats_text = MessageBuilder.build_admin_panel_message(stats_data)
            await query.edit_message_text(stats_text, reply_markup=KeyboardBuilder.build_admin_keyboard(), parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            self.logger.error(f"Error in show_admin_panel for user {user_id}: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        effective_user = update.effective_user
        if not effective_user: # –¢–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            self.logger.warning("Start command received without effective_user.")
            return

        user_id = effective_user.id
        self.logger.info(f"/start command initiated by user {user_id}.")
        try:
            if update.message and update.message.chat.type in ['group', 'supergroup']:
                await update.message.reply_text(f"‚ÑπÔ∏è –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`", parse_mode=ParseMode.MARKDOWN)
                return

            user_name = effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            ref_arg = context.args[0] if context.args and len(context.args) > 0 else None

            if self.user_service.is_blocked(user_id):
                blocked_text = "üö´ *–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù*\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                if update.message: await update.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
                elif update.callback_query: await update.callback_query.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
                return

            user_obj = self.db.get_user(user_id) # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User
            if not user_obj:
                ref_id_int = None
                if ref_arg and ref_arg.isdigit():
                    ref_id_int = int(ref_arg)
                    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å–∞–º —Å–æ–±–æ–π, –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
                    if ref_id_int == user_id: ref_id_int = None 
                    elif not self.db.get_user(ref_id_int): ref_id_int = None

                user_obj = await self.user_service.create_user(user_id, ref_id_int)
                self.logger.info(f"New user {user_id} (Obj ID: {user_obj.id}) created. Referrer ID: {ref_id_int if ref_id_int else 'None'}.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (CHANNEL_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ config/settings.py)
            if CHANNEL_ID and not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id, CHANNEL_ID) # –ü–µ—Ä–µ–¥–∞–µ–º CHANNEL_ID
                if not is_subscribed:
                    await show_channel_check(update, context, CHANNEL_ID, CHANNEL_LINK) # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏ —Å—Å—ã–ª–∫—É
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
            if CHANNEL_ID and hasattr(user_obj, 'channel_joined') and not user_obj.channel_joined:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ –Ω–∞–∂–∞–ª "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
                if await check_channel_subscription(context, user_id, CHANNEL_ID):
                    user_obj.channel_joined = True
                    self.db.session.commit()
                    self.logger.info(f"User {user_id} confirmed channel subscription (status updated).")

            welcome_text = MessageBuilder.build_welcome_message(user_obj, user_name)
            keyboard = KeyboardBuilder.build_main_keyboard(self.user_service.is_admin(user_id))

            if update.callback_query: # –ï—Å–ª–∏ /start –≤—ã–∑–≤–∞–Ω –∏–∑ callback (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ "–º–µ–Ω—é")
                await update.callback_query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            elif update.message:
                await update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            self.logger.error(f"Error in /start command for user {user_id}: {e}", exc_info=True)
            await self._send_error_message(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        if not query or not query.data: # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.logger.warning("Button_handler called with no query or query.data.")
            return
            
        await query.answer() 
        
        user_id = query.from_user.id
        self.logger.info(f"Button '{query.data}' pressed by user {user_id}.")

        try:
            if self.user_service.is_blocked(user_id):
                # –í–º–µ—Å—Ç–æ reply_text, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å answer —Å show_alert
                await query.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
                # –ò–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
                # await query.edit_message_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=None)
                return

            user = self.db.get_user(user_id)
            if not user:
                await query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.", 
                                              reply_markup=KeyboardBuilder.build_back_keyboard('menu'))
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∫—Ä–æ–º–µ check_subscription –∏ –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
            if CHANNEL_ID and query.data != 'check_subscription' and not self.user_service.is_admin(user_id):
                if not await check_channel_subscription(context, user_id, CHANNEL_ID):
                    await show_channel_check(update, context, CHANNEL_ID, CHANNEL_LINK)
                    return
            
            await self._route_callback(update, context, query.data)
        except TelegramError as te:
            self.logger.error(f"Telegram API Error in button_handler (user {user_id}, data '{query.data}'): {te}", exc_info=True)
            # –°–æ–æ–±—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–∞—Ö Telegram API –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–µ, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
            # await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        except Exception as e:
            self.logger.error(f"General Error in button_handler (user {user_id}, data '{query.data}'): {e}", exc_info=True)
            await self._send_error_message(update, "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def _route_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str) -> None:
        user_id = update.effective_user.id
        is_admin = self.user_service.is_admin(user_id)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        simple_routes = {
            'balance': show_balance, 'stats': self._show_user_stats,
            'investments': show_investments, 'withdraw': handle_withdraw_request,
            'bonus': self.handle_daily_bonus, 'referral': show_referral_program,
            'top': self._show_top_users, 'info': self._show_info,
            'history': self._show_withdrawal_history, 'menu': self.start,
            'check_subscription': self._handle_check_subscription,
        }
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–ø—Ä–æ—Å—Ç—ã–µ)
        admin_simple_routes = {
            'admin_panel': self.show_admin_panel,
            'admin_stats': self._show_detailed_stats,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Å—Ç—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        }

        if data in simple_routes:
            await simple_routes[data](update, context)
        elif data in admin_simple_routes:
            if is_admin:
                await admin_simple_routes[data](update, context)
            else:
                await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        # –°–ª–æ–∂–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        elif data.startswith(('invest_', 'confirm_invest_', 'calc_')):
            await handle_investment_request(update, context) # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–∞—Ä—Å–∏—Ç—å data
        elif data.startswith('req_withdraw_'): # –ò–∑–º–µ–Ω–∏–ª –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ (–∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞)
            parts = data.split('_') # req_withdraw_method_amount
            if len(parts) == 4 and parts[3].isdigit():
                method, amount_str = parts[2], parts[3]
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–æ—Å–∏—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                # –ù–∞–ø—Ä–∏–º–µ—Ä, await request_payment_details(update, context, method, int(amount_str))
                # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞:
                await handle_payment_details(update, context, payment_method=method, amount=int(amount_str))
                self.logger.info(f"User {user_id} selected withdrawal method {method} for amount {amount_str}")
            else:
                self.logger.warning(f"Invalid withdrawal request callback: {data} from user {user_id}")
                await self._handle_unknown_callback(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
        elif data.startswith('confirm_withdrawal_approve_'):
            if is_admin:
                withdrawal_id_str = data.replace('confirm_withdrawal_approve_', '')
                if withdrawal_id_str.isdigit():
                    # await self.withdrawal_service.process_withdrawal(int(withdrawal_id_str), True, user_id)
                    # –ò –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    await update.callback_query.answer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {withdrawal_id_str}...", show_alert=False)
                    self.logger.info(f"Admin {user_id} confirmed approval for withdrawal {withdrawal_id_str} (placeholder).")
                else: await self._handle_unknown_callback(update, context)
            else: await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)

        # –î—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–∑ build_admin_keyboard)
        elif data in ['admin_users_manage', 'admin_broadcast', 'admin_send_to_user', 
                      'admin_withdrawal_requests', 'admin_investments_manage', 
                      'admin_user_block', 'admin_user_unblock', 'admin_bot_settings'] and is_admin:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∑–æ–≤—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, await handle_admin_user_management(update, context, action=data)
            self.logger.info(f"Admin action '{data}' called by admin {user_id} (implementation pending).")
            await update.callback_query.answer(f"–ê–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–µ '{data}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
        
        else:
            await self._handle_unknown_callback(update, context)

    async def _handle_check_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        self.logger.debug(f"User {user_id} initiated subscription check.")
        if not CHANNEL_ID:
            await update.callback_query.answer("ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", show_alert=True)
            await self.start(update, context) # –í–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é, —Ç.–∫. –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
            return

        if await check_channel_subscription(context, user_id, CHANNEL_ID):
            user = self.db.get_user(user_id)
            if user and hasattr(user, 'channel_joined') and not user.channel_joined:
                user.channel_joined = True
                self.db.session.commit()
                self.logger.info(f"User {user_id} subscription confirmed and status updated in DB.")
            await update.callback_query.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.", show_alert=False)
            await self.start(update, context) 
        else:
            await update.callback_query.answer(f"–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_LINK}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑.", show_alert=True)
            # –ú–æ–∂–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–æ–≤–∞ show_channel_check, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    async def _show_user_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        self.logger.debug(f"User stats requested by user {user_id}.")
        user = self.db.get_user(user_id)
        if not user:
            await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", parse_mode=ParseMode.MARKDOWN)
            return
        stats_text = MessageBuilder.build_stats_message(user)
        await query.edit_message_text(stats_text, reply_markup=KeyboardBuilder.build_back_keyboard('menu'), parse_mode=ParseMode.MARKDOWN)

    async def _show_detailed_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –ø–æ—ç—Ç–æ–º—É query –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
        query = update.callback_query 
        user_id = query.from_user.id
        self.logger.debug(f"Detailed system stats requested by admin {user_id}.")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤ show_admin_panel, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º —É–∂–µ –µ—Å—Ç—å,
            # –∏–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –∑–∞–Ω–æ–≤–æ –∑–¥–µ—Å—å. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–±–æ—Ä–∞.
            # –í–∞–∂–Ω–æ: —ç—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª—ã–º–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –±–∞–∑–∞—Ö. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è.
            
            # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            total_users_count = self.db.session.query(User).count()
            active_24h = self.db.get_active_users_count_24h() if hasattr(self.db, 'get_active_users_count_24h') else "N/A"
            blocked_count = self.db.session.query(User).filter_by(is_blocked=True).count()
            new_today_count = self.db.get_new_users_today_count() if hasattr(self.db, 'get_new_users_today_count') else "N/A"
            subscribed_count = self.db.get_subscribed_users_count() if hasattr(self.db, 'get_subscribed_users_count') else "N/A"

            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            total_balance = sum(u.balance for u in self.db.session.query(User.balance).all()) or 0
            total_withdrawn = sum(w.amount for w in self.db.session.query(WithdrawalRequest.amount).filter_by(status='approved').all()) or 0
            total_invested_val = sum(u.total_invested for u in self.db.session.query(User.total_invested).all()) or 0
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–∞–º –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
            pending_withdrawals = self.db.session.query(WithdrawalRequest).filter_by(status='pending').count()
            # total_referrals = self.db.get_total_referrals_count() # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
            # avg_earnings = self.db.get_average_earnings_per_user() # –µ—Å–ª–∏ –µ—Å—Ç—å

            stats_text = f"""üìä *–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚îú –í—Å–µ–≥–æ: *{total_users_count:,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: *{active_24h if isinstance(active_24h, str) else f'{active_24h:,}'}*
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: *{blocked_count:,}*
‚îú –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: *{new_today_count if isinstance(new_today_count, str) else f'{new_today_count:,}'}*
‚îî –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª: *{subscribed_count if isinstance(subscribed_count, str) else f'{subscribed_count:,}'}*

üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö: *{format_currency(total_balance)}*
‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ (–æ–¥–æ–±—Ä–µ–Ω–æ): *{format_currency(total_withdrawn)}*
‚îî –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(total_invested_val)}*

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–≤ –æ–∂–∏–¥–∞–Ω–∏–∏): *{pending_withdrawals:,}*
{f'‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: *{self.db.get_total_referrals_count():,}*' if hasattr(self.db, 'get_total_referrals_count') else ""}
{f'‚îî –°—Ä–µ–¥–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{format_currency(self.db.get_average_earnings_per_user())}*' if hasattr(self.db, 'get_average_earnings_per_user') else ""}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"""
            await query.edit_message_text(stats_text, reply_markup=KeyboardBuilder.build_back_keyboard('admin_panel'), parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            self.logger.error(f"Error showing detailed stats for admin {user_id}: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


    async def _show_top_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        self.logger.debug(f"Top users list requested by user {user_id}.")
        try:
            top_users_db = self.db.session.query(User).order_by(User.total_earned.desc(), User.balance.desc()).limit(10).all()
            top_text = "üèÜ *–¢–û–ü-10 –£–°–ü–ï–®–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
            medals = ["ü•á", "ü•à", "ü•â"] + [f"{i}Ô∏è‚É£" for i in range(4, 11)]

            if not top_users_db:
                top_text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
            else:
                for i, user_db_obj in enumerate(top_users_db):
                    name_display = f"ID {user_db_obj.user_id}" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è
                        chat_info = await context.bot.get_chat(user_db_obj.user_id)
                        temp_name = chat_info.first_name or chat_info.username
                        if temp_name: name_display = temp_name
                        name_display = name_display[:20].rstrip() + ("..." if len(name_display) > 20 else "")
                    except TelegramError as te: 
                        self.logger.warning(f"TelegramError getting chat info for top user {user_db_obj.user_id}: {te.message}")
                    except Exception as e_chat: 
                        self.logger.error(f"Unexpected error getting chat info for top user {user_db_obj.user_id}: {e_chat}", exc_info=False) # exc_info=False —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏, –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞
                    
                    refs_count = len(user_db_obj.referrals) if hasattr(user_db_obj, 'referrals') else 0
                    active_inv_count = 0
                    if hasattr(user_db_obj, 'investments'):
                        active_inv_count = len([inv for inv in user_db_obj.investments if hasattr(inv, 'is_finished') and not inv.is_finished])
                    
                    top_text += f"{medals[i]} *{name_display}*\n"
                    top_text += f"‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user_db_obj.total_earned)}*\n"
                    top_text += f"‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{refs_count}*\n"
                    top_text += f"‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{active_inv_count}*\n\n"
            
            top_text += "\nüí° *–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Ç–æ–ø–∞! –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ.*"
            await query.edit_message_text(top_text, reply_markup=KeyboardBuilder.build_back_keyboard('menu'), parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            self.logger.error(f"Error in _show_top_users for user {user_id}: {e}", exc_info=True)
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def _show_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        self.logger.debug(f"Info section requested by user {user_id}.")
        info_text = MessageBuilder.build_info_message()
        await query.edit_message_text(info_text, reply_markup=KeyboardBuilder.build_back_keyboard('menu'), parse_mode=ParseMode.MARKDOWN)

    async def _show_withdrawal_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id_tg = query.from_user.id # Telegram ID
        self.logger.debug(f"Withdrawal history requested by user {user_id_tg}.")
        try:
            user_obj = self.db.get_user(user_id_tg) # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç User –ø–æ Telegram ID
            if not user_obj:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", parse_mode=ParseMode.MARKDOWN)
                return

            # WithdrawalRequest.user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å FK –Ω–∞ User.id (–ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã users)
            withdrawals_list = (
                self.db.session.query(WithdrawalRequest)
                .filter_by(user_id=user_obj.id) 
                .order_by(WithdrawalRequest.date.desc())
                .limit(10) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                .all()
            )
            
            if not withdrawals_list:
                history_text = f"üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í*\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n\nüí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {format_currency(MIN_WITHDRAW)}"
            else:
                history_text = "üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {}):\n\n".format(len(withdrawals_list))
                total_requested_shown = sum(w.amount for w in withdrawals_list)
                approved_shown_count = len([w for w in withdrawals_list if w.status == 'approved'])
                
                history_text += f"üìä *–ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞—è–≤–æ–∫:* {len(withdrawals_list)}\n"
                history_text += f"‚îú –û–¥–æ–±—Ä–µ–Ω–æ –∏–∑ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö: *{approved_shown_count}*\n"
                history_text += f"‚îî –°—É–º–º–∞ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: *{format_currency(total_requested_shown)}*\n\n"
                
                for w_req in withdrawals_list:
                    status_emoji = {'pending': '‚è≥', 'approved': '‚úÖ', 'rejected': '‚ùå'}.get(w_req.status, '‚ùì')
                    status_text_map = {'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', 'approved': '–û–¥–æ–±—Ä–µ–Ω–∞', 'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}
                    status_display = status_text_map.get(w_req.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
                    
                    history_text += f"üÜî *–ó–∞—è–≤–∫–∞ #{w_req.id}* | –°—É–º–º–∞: *{format_currency(w_req.amount)}*\n"
                    history_text += f"‚îú –°–∏—Å—Ç–µ–º–∞: *{w_req.method.upper()}* | –î–∞—Ç–∞: {w_req.date.strftime('%d.%m.%y %H:%M')}\n"
                    history_text += f"‚îî –°—Ç–∞—Ç—É—Å: {status_emoji} {status_display}\n\n"

            await query.edit_message_text(history_text, reply_markup=KeyboardBuilder.build_back_keyboard('menu'), parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            self.logger.error(f"Error in _show_withdrawal_history for user {user_id_tg}: {e}", exc_info=True)
            await self._send_error_message(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤.")

    async def _handle_unknown_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        self.logger.warning(f"Unknown callback_data '{query.data}' received from user {query.from_user.id}.")
        await query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.", show_alert=True)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
        # await self.start(update, context) 

    async def _send_error_message(self, update: Update, error_text_user: str) -> None:
        # error_text_user - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        internal_error_guid = os.urandom(4).hex() # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –ª–æ–≥–æ–≤
        self.logger.error(f"Error occurred (GUID: {internal_error_guid}). User message: '{error_text_user}'")
        
        user_message = f"‚ùå {error_text_user}\n\n" \
                       f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, " \
                       f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —É–∫–∞–∑–∞–≤ –∫–æ–¥ –æ—à–∏–±–∫–∏: `{internal_error_guid}`"
        
        keyboard = KeyboardBuilder.build_back_keyboard('menu')
        try:
            if update.callback_query and update.callback_query.message:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
                await update.callback_query.edit_message_text(user_message, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            elif update.message:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞
                await update.message.reply_text(user_message, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            # –ï—Å–ª–∏ —ç—Ç–æ callback, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
            elif update.callback_query:
                 await update.callback_query.answer(error_text_user, show_alert=True)
                 # –ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                 await context.bot.send_message(chat_id=update.effective_chat.id, text=user_message, 
                                                reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        except TelegramError as te: 
            self.logger.error(f"TelegramError while sending error message to user (GUID: {internal_error_guid}): {te.message}")
        except Exception as e_send: 
            self.logger.error(f"Unexpected error while sending error message to user (GUID: {internal_error_guid}): {e_send}", exc_info=True)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    app_logger = BotLogger.setup_logging()
    
    application_ptb = None # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ finally
    cron_server_instance = None # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ finally
    telegram_bot_service_instance = None # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ finally

    try:
        app_logger.info("üèÅ Application starting...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ TelegramBot, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É
        telegram_bot_service_instance = TelegramBot() 
        
        if not TOKEN: 
            app_logger.critical("‚ùå FATAL: TELEGRAM_BOT_TOKEN is not defined. Exiting application.")
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ python-telegram-bot
        application_ptb = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        telegram_bot_service_instance.setup_handlers(application_ptb)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—É–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ PTB (post_init, post_shutdown)
        application_ptb.post_init = telegram_bot_service_instance.post_init
        application_ptb.post_shutdown = telegram_bot_service_instance.cleanup
        
        render_app_url = os.getenv('RENDER_EXTERNAL_URL') # URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Webhook (–¥–ª—è Render) –∏–ª–∏ Polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if render_app_url and os.getenv('RENDER'): # RENDER - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
            app_logger.info("üì° Starting in Webhook mode (detected Render environment).")
            
            port_env_str = os.getenv('PORT') # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
            if not port_env_str or not port_env_str.isdigit():
                app_logger.critical(f"‚ùå FATAL: Environment variable PORT is not set or invalid ('{port_env_str}'). Exiting.")
                return
            listen_port = int(port_env_str)

            # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∞–º —Ç–æ–∫–µ–Ω
            webhook_path_segment = TOKEN 
            full_webhook_url_for_telegram = f"{render_app_url.rstrip('/')}/{webhook_path_segment}"
            
            app_logger.info(f"Configuring Webhook: URL for Telegram API -> {full_webhook_url_for_telegram}")
            app_logger.info(f"Webhook server will listen on -> 0.0.0.0:{listen_port}, Path -> /{webhook_path_segment}")
            
            # –ó–∞–ø—É—Å–∫ Cron —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if render_app_url and CronServer and hasattr(CronServer, 'start'): 
                try:
                    cron_server_instance = CronServer(render_app_url) # –ü–µ—Ä–µ–¥–∞–µ–º URL –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤
                    await cron_server_instance.start() 
                    app_logger.info("‚è∞ Cron server started successfully.")
                except Exception as e_cron:
                    app_logger.warning(f"‚ö†Ô∏è Failed to start cron server: {e_cron}", exc_info=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤ —Ä–µ–∂–∏–º–µ webhook. –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤.
            await application_ptb.run_webhook(
                listen="0.0.0.0", # –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
                port=listen_port,
                url_path=webhook_path_segment, # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
                webhook_url=full_webhook_url_for_telegram, # URL, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ Telegram API
                drop_pending_updates=True # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                # secret_token="YOUR_SECRET_PHRASE" # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
            )
            # –ö–æ–¥ –∑–¥–µ—Å—å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –ø–æ–∫–∞ run_webhook —Ä–∞–±–æ—Ç–∞–µ—Ç
            
        else:
            # –†–µ–∂–∏–º Polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            app_logger.info("üîÑ Starting in Polling mode (local development or non-Render environment).")
            
            # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling, —É–¥–∞–ª—è–µ–º –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫
            app_logger.info("Attempting to delete any existing webhook settings...")
            await application_ptb.bot.delete_webhook(drop_pending_updates=True)
            app_logger.info("Webhook (if any) successfully deleted.")

            # –ó–∞–ø—É—Å–∫ Cron —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –µ—Å—Ç—å URL –¥–ª—è –ø–∏–Ω–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, ngrok)
            if render_app_url and CronServer and hasattr(CronServer, 'start'): # render_app_url –º–æ–∂–µ—Ç –±—ã—Ç—å ngrok URL
                 try:
                    cron_server_instance = CronServer(render_app_url)
                    await cron_server_instance.start()
                    app_logger.info("‚è∞ Cron server started (local).")
                 except Exception as e_cron_local:
                    app_logger.warning(f"‚ö†Ô∏è Failed to start cron server (local): {e_cron_local}", exc_info=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PTB –≤ —Ä–µ–∂–∏–º–µ polling. –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤.
            app_logger.info("Starting polling for updates from Telegram...")
            await application_ptb.run_polling(
                drop_pending_updates=True,
                poll_interval=0.5, # –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)
                timeout=10         # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ getUpdates (—Å–µ–∫)
            )
            # –ö–æ–¥ –∑–¥–µ—Å—å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –ø–æ–∫–∞ run_polling —Ä–∞–±–æ—Ç–∞–µ—Ç
        
    except KeyboardInterrupt:
        app_logger.info("üõë Bot stopped by user (KeyboardInterrupt). Performing cleanup...")
    except SystemExit as se: # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ exit(1) –∏ —Ç.–ø.
        app_logger.info(f"Application exited with code {se.code}.")
    except Exception as e_main:
        app_logger.critical(f"üí• CRITICAL UNHANDLED ERROR in main application loop: {e_main}", exc_info=True)
        # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if application_ptb and telegram_bot_service_instance and ADMIN_IDS:
            error_report_message = f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–û–¢–ê*\n\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏:\n`{type(e_main).__name__}: {str(e_main)}`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            for admin_tg_id in ADMIN_IDS:
                try:
                    await application_ptb.bot.send_message(chat_id=admin_tg_id, text=error_report_message, parse_mode=ParseMode.MARKDOWN)
                except Exception as e_send_admin_err:
                    app_logger.error(f"Failed to send critical error notification to admin {admin_tg_id}: {e_send_admin_err}")
    finally:
        app_logger.info("üßº Initiating final cleanup (if any)...")
        if cron_server_instance and hasattr(cron_server_instance, 'stop') and callable(cron_server_instance.stop):
            app_logger.info("Stopping cron server...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ stop –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
                if asyncio.iscoroutinefunction(cron_server_instance.stop):
                    await cron_server_instance.stop()
                else:
                    cron_server_instance.stop()
                app_logger.info("Cron server stopped.")
            except Exception as e_cron_stop_final:
                app_logger.error(f"Error stopping cron server during final cleanup: {e_cron_stop_final}", exc_info=True)
        
        # PTB v20+ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É application –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ run_polling/run_webhook
        # –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ application.stop() –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ —Å–¥–µ–ª–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.
        
        app_logger.info("üö™ Application shutdown process finished.")


if __name__ == '__main__':
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ (python bot.py)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-dotenv: pip install python-dotenv
    try:
        from dotenv import load_dotenv
        if load_dotenv():
             print("Loaded environment variables from .env file.")
        else:
             print("No .env file found or it is empty. Using system environment variables.")
    except ImportError:
        print("python-dotenv library not found. Skipping .env file loading. Ensure environment variables are set.")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ config.settings –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥ (dev, prod) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    # TOKEN, ADMIN_IDS –∏ —Ç.–¥. —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–±–æ –∏–∑ config.settings, –ª–∏–±–æ –∏–∑ os.getenv –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è TOKEN –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–≤–∞–∂–Ω–µ–π—à–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    # TOKEN –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.
    if not TOKEN: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Å —Ç–æ–π, —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –Ω–æ –¥–ª—è __main__ –æ–Ω–∞ –≤–∞–∂–Ω–∞.
        print("FATAL ERROR: TELEGRAM_BOT_TOKEN is not set. Cannot start the bot.")
        print("Please set it in your config/settings.py, .env file, or as an environment variable.")
        exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
    asyncio.run(main())
