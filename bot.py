import logging
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
from config.settings import *
from utils.database import Database
from utils.cron_server import CronServer
from utils.helpers import format_currency
from models.user import User, WithdrawalRequest, Investment

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.user import check_channel_subscription, show_channel_check
from handlers.admin import handle_admin_command, handle_admin_message
from handlers.withdraw import (
    handle_withdraw_request, 
    notify_admins_withdrawal, 
    handle_payment_details
)
from handlers.investments import show_investments, handle_investment_request
from handlers.referral import show_referral_program, handle_referral_bonus

# üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database()

async def handle_daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    user_id = update.callback_query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    now = datetime.now()
    if now - user.last_bonus < timedelta(days=1):
        next_bonus = user.last_bonus + timedelta(days=1)
        hours = int((next_bonus - now).total_seconds() / 3600)
        minutes = int(((next_bonus - now).total_seconds() % 3600) / 60)
        
        await update.callback_query.answer(
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω.",
            show_alert=True
        )
        return
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    user.balance += DAILY_BONUS
    user.total_earned += DAILY_BONUS
    user.last_bonus = now
    db.session.commit()
    
    bonus_text = f"""üéÅ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!*

üí∞ –°—É–º–º–∞: *{format_currency(DAILY_BONUS)}*
üíµ –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"""

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    await update.callback_query.edit_message_text(
        bonus_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

# üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
def is_blocked(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user = db.get_user(user_id)
    return user and user.is_blocked if user else False

# üéØ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user(user_id: int, ref_id: int = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.create_user(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if ref_id and ref_id != user_id:
        referrer = db.get_user(ref_id)
        if referrer and not db.get_referral(ref_id, user_id):
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
            db.create_referral(ref_id, user_id)
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            referrer.balance += REFERRAL_BONUS
            referrer.total_earned += REFERRAL_BONUS
            db.session.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {ref_id}")
    
    return user

# üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    stats = db.get_user_statistics()
    stats_text = f"""üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: *{stats['active_users']}*
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: *{stats['blocked_users']}*

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')],
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='admin_send_user'),
         InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_block')],
        [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unblock')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
    ]

    if update.callback_query:
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
    if update.message and update.message.chat.type in ['group', 'supergroup']:
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`", parse_mode=ParseMode.MARKDOWN)
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–î—Ä—É–≥"
    ref = context.args[0] if context.args else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        blocked_text = """üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*

‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.

üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        
        if update.message:
            await update.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user:
        ref_id = int(ref) if ref and ref.isdigit() else None
        user = await create_user(user_id, ref_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (–∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if not is_admin(user_id):
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if not user.channel_joined:
        user.channel_joined = True
        db.session.commit()
    
    # üé® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥", callback_data='withdraw'),
         InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å", callback_data='bonus')],
        [InlineKeyboardButton("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='investments'),
         InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='referral')],
        [InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data='top'),
         InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

üí∞ –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(user.referrals)}*

üî• –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

    if update.callback_query:
        await update.callback_query.edit_message_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user:
        await query.edit_message_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='menu')
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if query.data != 'check_subscription' and not is_admin(user_id):
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return
    
    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    if query.data == 'admin_panel' and is_admin(user_id):
        await show_admin_panel(update, context)
        return
    
    elif query.data == 'admin_stats' and is_admin(user_id):
        stats = db.get_user_statistics()
        invest_stats = db.get_investments_statistics()
        
        stats_text = f"""üìä *–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ: *{stats['total_users']}*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: *{stats['active_users']}*
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: *{stats['blocked_users']}*

üí∞ *–§–∏–Ω–∞–Ω—Å—ã:*
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(invest_stats['total_investments'])}*
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(invest_stats['total_profit_paid'])}*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{invest_stats['active_investments']}*

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    elif query.data == 'stats':
        ref_count = len(user.referrals)
        ref_earnings = sum(r.bonus_paid for r in user.referrals)
        invest_earnings = sum(i.total_profit for i in user.investments)
        
        stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üí∞ *–ë–∞–ª–∞–Ω—Å –∏ –¥–æ—Ö–æ–¥:*
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚Ä¢ –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*

üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{ref_count}*
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{format_currency(ref_earnings)}*

üìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{len(user.investments)}*
‚Ä¢ –ü—Ä–∏–±—ã–ª—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{format_currency(invest_earnings)}*

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.join_date.strftime('%d.%m.%Y %H:%M')}"""

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    elif query.data == 'withdraw':
        await handle_withdraw_request(update, context)
    elif query.data == 'bonus':
        await handle_daily_bonus(update, context)
    elif query.data == 'investments':
        await show_investments(update, context)
    elif query.data == 'referral':
        await show_referral_program(update, context)
    elif query.data == 'top':
        await show_top_users(update, context)
    elif query.data == 'info':
        await show_info(update, context)
    elif query.data == 'history':
        await show_withdrawal_history(update, context)
    elif query.data == 'menu':
        await start(update, context)
    # –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å

async def handle_withdraw_request(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if amount < MIN_WITHDRAW:
        await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW} ‚ÇΩ", show_alert=True)
        return
    
    if amount > user.balance:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return
    
    payment_keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f'payment_card_{amount}')],
        [InlineKeyboardButton("üí∞ QIWI", callback_data=f'payment_qiwi_{amount}')],
        [InlineKeyboardButton("üì± –ÆMoney", callback_data=f'payment_ymoney_{amount}')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='withdraw')]
    ]
    
    payment_text = f"""üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞*

üí∞ –°—É–º–º–∞: *{format_currency(amount)}*
‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞"""

    await query.edit_message_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(payment_keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∏ —Å—É–º–º—É –∏–∑ callback_data
    _, method, amount = query.data.split('_')
    amount = int(amount)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    if amount > user.balance:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return
    
    if amount < MIN_WITHDRAW:
        await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {format_currency(MIN_WITHDRAW)}", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['withdraw'] = {
        'amount': amount,
        'method': method,
        'user_id': user_id
    }
    
    await query.edit_message_text(
        f"""üí≥ *–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*

üí∞ –°—É–º–º–∞: *{format_currency(amount)}*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{method.upper()}*

‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:""",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='withdraw')
        ]]),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    context.user_data['waiting_for'] = 'payment_details'

async def handle_withdrawal_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    try:
        action, withdrawal_id = query.data.split('_')
        withdrawal_id = int(withdrawal_id)
    except (ValueError, TypeError):
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    withdrawal = db.session.query(WithdrawalRequest).get(withdrawal_id)
    if not withdrawal:
        await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    withdrawal_user = withdrawal.user
    if not withdrawal_user:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if action == 'approve':
        withdrawal.status = 'approved'
        withdrawal.processed_date = datetime.now()
        withdrawal.processed_by = user_id
        withdrawal_user.withdrawals += withdrawal.amount
        db.session.commit()
        await notify_withdrawal_status(context, withdrawal_user.user_id, withdrawal, True)
    else:
        withdrawal.status = 'rejected'
        withdrawal.processed_date = datetime.now()
        withdrawal.processed_by = user_id
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        withdrawal_user.balance += withdrawal.amount
        db.session.commit()
        await notify_withdrawal_status(context, withdrawal_user.user_id, withdrawal, False)
    
    await query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)

async def notify_withdrawal_status(context: ContextTypes.DEFAULT_TYPE, user_id: int, withdrawal: WithdrawalRequest, approved: bool):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞"""
    if approved:
        text = f"""‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!*

üí∞ –°—É–º–º–∞: *{format_currency(withdrawal.amount)}*
üí≥ –ú–µ—Ç–æ–¥: *{withdrawal.method.upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal.id}`

‚ö°Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"""
    else:
        text = f"""‚ùå *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*

üí∞ –°—É–º–º–∞: *{format_currency(withdrawal.amount)}*
üí≥ –ú–µ—Ç–æ–¥: *{withdrawal.method.upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal.id}`

üíµ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
‚ö°Ô∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""

    keyboard = [
        [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data='history')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
    ]

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_admins_about_withdrawal(context: ContextTypes.DEFAULT_TYPE, user_id: int, withdrawal: WithdrawalRequest):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        user = await context.bot.get_chat(user_id)
        user_mention = f"[{user.first_name}](tg://user?id={user_id})"
    except:
        user_mention = f"User ID: `{user_id}`"
    
    db_user = db.get_user(user_id)
    if not db_user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return
    
    admin_message = f"""üí∞ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}
üíµ –°—É–º–º–∞: *{format_currency(withdrawal.amount)}*
üí≥ –°–ø–æ—Å–æ–±: *{withdrawal.method.upper()}*
üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{withdrawal.details}`
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal.id}`
üìÖ –î–∞—Ç–∞: {withdrawal.date.strftime('%d.%m.%Y %H:%M')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚Ä¢ –ë–∞–ª–∞–Ω—Å: *{format_currency(db_user.balance)}*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(db_user.total_earned)}*
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(db_user.referrals)}*"""

    keyboard = [[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{withdrawal.id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{withdrawal.id}")
    ]]

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É
    top_users = db.session.query(User)\
        .order_by(User.total_earned.desc(), User.balance.desc())\
        .limit(10)\
        .all()
    
    top_text = "üèÜ *–¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
    
    for i, user in enumerate(top_users, 1):
        try:
            chat = await context.bot.get_chat(user.user_id)
            name = chat.first_name
        except:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}"
        
        refs_count = len(user.referrals)
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        
        top_text += f"{medal} {name}\n"
        top_text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*\n"
        top_text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{refs_count}*\n\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            top_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            top_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"""
    info_text = f"""‚ÑπÔ∏è *–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ—Ç–µ*

üí∞ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*

1Ô∏è‚É£ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS} ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª

2Ô∏è‚É£ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ {DAILY_BONUS} ‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞

3Ô∏è‚É£ *–£—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*
‚Ä¢ ü•â –ù–æ–≤–∏—á–æ–∫ (0-49 ‚ÇΩ)
‚Ä¢ ü•à –ê–∫—Ç–∏–≤–Ω—ã–π (50-99 ‚ÇΩ)
‚Ä¢ ü•á VIP (100+ ‚ÇΩ)

4Ô∏è‚É£ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAW} ‚ÇΩ
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ"""

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            info_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            info_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_withdrawal_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    withdrawals = db.session.query(WithdrawalRequest).filter_by(user_id=user.id).order_by(WithdrawalRequest.date.desc()).all()
    
    if not withdrawals:
        history_text = """üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤*

‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    else:
        history_text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤*\n\n"
        for w in withdrawals:
            status = {
                'pending': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
            }.get(w.status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            history_text += f"""üÜî –ó–∞—è–≤–∫–∞ `{w.id}`
üí∞ –°—É–º–º–∞: *{format_currency(w.amount)}*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{w.method.upper()}*
üìÖ –î–∞—Ç–∞: {w.date.strftime('%d.%m.%Y %H:%M')}
‚ú® –°—Ç–∞—Ç—É—Å: {status}\n\n"""
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        await update.message.reply_text(
            "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å", callback_data='menu')
            ]])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not is_admin(user_id):
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return
    
    waiting_for = context.user_data.get('waiting_for')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    if waiting_for == 'payment_details':
        await handle_payment_details(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    elif waiting_for in ['broadcast_message', 'user_id_for_message', 'user_id_to_block', 'user_id_to_unblock'] and is_admin(user_id):
        await handle_admin_message(update, context)
        return
    
    # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    else:
        await start(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    error = context.error
    logger.error(f"Update {update} caused error {error}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.get_user_statistics()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∞–º
        error_text = f"""‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*

üîÑ Update ID: `{update.update_id if update else 'Unknown'}`
üë§ User: `{update.effective_user.id if update and update.effective_user else 'Unknown'}`
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*
‚ö†Ô∏è Error: `{str(error)}`"""

        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=error_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            except:
                continue
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_message:
            error_msg = """‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
            
            await update.effective_message.reply_text(
                error_msg,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')
                ]])
            )
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

async def send_analytics(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    if not ANALYTICS_CHAT_ID:
        logger.error("ANALYTICS_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        chat = await context.bot.get_chat(ANALYTICS_CHAT_ID)
        if not chat:
            logger.error(f"–ß–∞—Ç —Å ID {ANALYTICS_CHAT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        now = datetime.now()
        message_text = f"""ü§ñ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*
üìÖ {now.strftime('%d.%m.%Y %H:%M')}

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.get_user_statistics()['total_users']}
üîÑ –†–µ–∂–∏–º: {"Webhook" if os.getenv('RENDER') else "Polling"}"""
        
        try:
            await context.bot.send_message(
                chat_id=ANALYTICS_CHAT_ID,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞: {str(e)}")
        return

    try:
        await context.bot.send_message(
            chat_id=ANALYTICS_CHAT_ID,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        return
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode=ParseMode.MARKDOWN)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if WEBHOOK_ENABLED:
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook –¥–ª—è production
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        application.run_webhook(
            listen='0.0.0.0',
            port=PORT,
            webhook_url=WEBHOOK_URL,
            url_path=TOKEN
        )
    else:
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long polling")
        application.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    main()