# –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–¥ –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ main()...

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chatid", get_chat_id))
    application.add_handler(CallbackQueryHandler(handle_subscription_check, pattern="^check_subscription$"))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    await application.initialize()
    await application.start()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    job_queue = application.job_queue
    job_queue.run_repeating(send_analytics, interval=300, first=10)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    async def send_startup_message():
        if ANALYTICS_CHAT_ID:
            try:
                await application.bot.send_message(
                    chat_id=ANALYTICS_CHAT_ID,
                    text="üöÄ *–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\nüìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " + datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                    parse_mode=ParseMode.MARKDOWN
                )
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ
    await send_startup_message()

    try:
        if os.getenv('RENDER'):
            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ Render.com
            port = int(os.getenv('PORT', 3000))
            webhook_url = f"{os.getenv('RENDER_EXTERNAL_URL')}/{TOKEN}"
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await application.bot.set_webhook(url=webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {webhook_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
            await application.updater.start_webhook(
                listen='0.0.0.0',
                port=port,
                url_path=TOKEN,
                webhook_url=webhook_url,
                allowed_updates=["message", "callback_query"],
                drop_pending_updates=True
            )
            await application.updater.start_webhook_server()
            await application.idle()
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
            await application.updater.start_polling(drop_pending_updates=True)
            await application.idle()
    finally:
        if application.updater and application.updater.running:
            await application.updater.stop()
        await application.stop()
        await application.shutdown()

if __name__ == '__main__':
    try:
        import asyncio
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
