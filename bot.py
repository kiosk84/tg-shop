import logging
import os
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
from config.settings import *
from utils.database import Database
from utils.cron_server import CronServer
from utils.helpers import format_currency
from models.user import User, WithdrawalRequest, Investment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.user import check_channel_subscription, show_channel_check, show_balance
from handlers.admin import handle_admin_command, handle_admin_message
from handlers.withdraw import (
    handle_withdraw_request, 
    notify_admins_withdrawal, 
    handle_payment_details
)
from handlers.investments import show_investments, handle_investment_request
from handlers.referral import show_referral_program, handle_referral_bonus

class BotLogger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞"""
    
    @staticmethod
    def setup_logging():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO,
            handlers=[
                logging.FileHandler('bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger(__name__)

class UserService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in ADMIN_IDS
    
    def is_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        user = self.db.get_user(user_id)
        return user and user.is_blocked if user else False
    
    async def create_user(self, user_id: int, ref_id: Optional[int] = None) -> User:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.create_user(user_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
            if ref_id and ref_id != user_id:
                referrer = self.db.get_user(ref_id)
                if referrer and not self.db.get_referral(ref_id, user_id):
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
                    self.db.create_referral(ref_id, user_id)
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    referrer.balance += REFERRAL_BONUS
                    referrer.total_earned += REFERRAL_BONUS
                    self.db.session.commit()
                    self.logger.info(f"User {user_id} joined via referral link {ref_id}")
            
            return user
            
        except Exception as e:
            self.logger.error(f"Error creating user {user_id}: {e}")
            raise

class BonusService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏"""
    
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)
    
    def can_claim_daily_bonus(self, user: User) -> tuple[bool, Optional[timedelta]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        now = datetime.now()
        time_since_last = now - user.last_bonus
        
        if time_since_last >= timedelta(days=1):
            return True, None
        
        next_bonus_time = user.last_bonus + timedelta(days=1) - now
        return False, next_bonus_time
    
    def claim_daily_bonus(self, user: User) -> bool:
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
        try:
            can_claim, _ = self.can_claim_daily_bonus(user)
            if not can_claim:
                return False
            
            user.balance += DAILY_BONUS
            user.total_earned += DAILY_BONUS
            user.last_bonus = datetime.now()
            self.db.session.commit()
            
            self.logger.info(f"Daily bonus claimed by user {user.user_id}")
            return True
        except Exception as e:
            self.logger.error(f"Error claiming daily bonus for user {user.user_id}: {e}")
            return False

class WithdrawalService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–≤–æ–¥–æ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    
    def __init__(self, database: Database):
        self.db = database
        self.logger = logging.getLogger(__name__)
    
    def validate_withdrawal(self, user: User, amount: int) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥"""
        if amount < MIN_WITHDRAW:
            return {
                'valid': False,
                'error': f'üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW:,}‚ÇΩ'
            }
        
        if amount > user.balance:
            return {
                'valid': False,
                'error': f'üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount:,}‚ÇΩ\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,}‚ÇΩ'
            }
        
        return {'valid': True}
    
    def create_withdrawal_request(self, user: User, amount: int, method: str, details: str) -> Optional[WithdrawalRequest]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
        try:
            validation = self.validate_withdrawal(user, amount)
            if not validation['valid']:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            withdrawal = WithdrawalRequest(
                user_id=user.id,
                amount=amount,
                method=method,
                details=details,
                date=datetime.now(),
                status='pending'
            )
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            user.balance -= amount
            
            self.db.session.add(withdrawal)
            self.db.session.commit()
            
            self.logger.info(f"Withdrawal request created: user_id={user.user_id}, amount={amount}")
            return withdrawal
        except Exception as e:
            self.logger.error(f"Error creating withdrawal request: {e}")
            self.db.session.rollback()
            return None
    
    def process_withdrawal(self, withdrawal_id: int, approved: bool, admin_id: int) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
        try:
            withdrawal = self.db.session.query(WithdrawalRequest).get(withdrawal_id)
            if not withdrawal:
                return False
            
            withdrawal.status = 'approved' if approved else 'rejected'
            withdrawal.processed_date = datetime.now()
            withdrawal.processed_by = admin_id
            
            if approved:
                withdrawal.user.withdrawals += withdrawal.amount
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
                withdrawal.user.balance += withdrawal.amount
            
            self.db.session.commit()
            self.logger.info(f"Withdrawal {withdrawal_id} {'approved' if approved else 'rejected'}")
            return True
        except Exception as e:
            self.logger.error(f"Error processing withdrawal {withdrawal_id}: {e}")
            self.db.session.rollback()
            return False

class MessageBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞"""
    
    @staticmethod
    def build_welcome_message(user: User, user_name: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.total_earned >= 1000:
            status = "üëë VIP"
        elif user.total_earned >= 500:
            status = "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif user.total_earned >= 100:
            status = "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            status = "ü•â –ù–æ–≤–∏—á–æ–∫"
        
        return f"""üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

{status} ‚Ä¢ ID: `{user.user_id}`

üíé *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*
‚îî –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(user.referrals)}*

üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"""
    
    @staticmethod
    def build_stats_message(user: User) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        ref_count = len(user.referrals)
        ref_earnings = sum(r.bonus_paid for r in user.referrals)
        invest_earnings = sum(i.total_profit for i in user.investments)
        active_investments = len([i for i in user.investments if not i.is_finished])
        
        # –†–∞—Å—á–µ—Ç ROI
        roi = (user.total_earned / max(user.total_invested, 1)) * 100 if user.total_invested > 0 else 0
        
        return f"""üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:*
‚îú –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
‚îú –í—ã–≤–µ–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: *{format_currency(user.withdrawals)}*
‚îî ROI: *{roi:.1f}%*

üë• *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{ref_count}*
‚îú –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{format_currency(ref_earnings)}*
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: *{format_currency(ref_earnings / max(ref_count, 1))}*

üìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚îú –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(user.total_invested)}*
‚îú –ü—Ä–∏–±—ã–ª—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{format_currency(invest_earnings)}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{active_investments}*
‚îî –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: *{len(user.investments) - active_investments}*

üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.join_date.strftime('%d.%m.%Y')}
‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {user.last_bonus.strftime('%d.%m.%Y') if user.last_bonus else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}"""
    
    @staticmethod
    def build_admin_panel_message(stats: Dict[str, Any]) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return f"""üëë *–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{stats['total_users']:,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['active_users']:,}*
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: *{stats['blocked_users']:,}*
‚îî –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{stats.get('new_today', 0):,}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(stats.get('total_balance', 0))}*
‚îú –í—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(stats.get('total_withdrawals', 0))}*
‚îî –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(stats.get('total_investments', 0))}*

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    @staticmethod
    def build_bonus_message(amount: int, balance: int, streak: int = 1) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞"""
        return f"""üéÅ *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° –ü–û–õ–£–ß–ï–ù!*

üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: *{format_currency(amount)}*
üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{format_currency(balance)}*
üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: *{streak}*

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
üí° –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏!"""
    
    @staticmethod
    def build_info_message() -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"""üí° *–ö–ê–ö –ó–ê–†–ê–ë–û–¢–ê–¢–¨ –í –ë–û–¢–ï*

üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*

1Ô∏è‚É£ *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*
‚îú –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS:,}‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚îú –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
‚îî –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π

2Ô∏è‚É£ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã*
‚îú –ü–æ–ª—É—á–∞–π—Ç–µ {DAILY_BONUS:,}‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚îú –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
‚îú –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–µ—Ä–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
‚îî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–æ–Ω—É—Å

3Ô∏è‚É£ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã*
‚îú üå± –°—Ç–∞—Ä—Ç–µ—Ä: –æ—Ç 100‚ÇΩ ‚Ä¢ 1.2% –≤ –¥–µ–Ω—å
‚îú üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç: –æ—Ç 1,000‚ÇΩ ‚Ä¢ 1.8% –≤ –¥–µ–Ω—å  
‚îú üöÄ –ü—Ä–µ–º–∏—É–º: –æ—Ç 5,000‚ÇΩ ‚Ä¢ 2.5% –≤ –¥–µ–Ω—å
‚îî üëë VIP: –æ—Ç 20,000‚ÇΩ ‚Ä¢ 3.5% –≤ –¥–µ–Ω—å

4Ô∏è‚É£ *–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π*
‚îú ü•â –ù–æ–≤–∏—á–æ–∫: 0-99‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•à –ê–∫—Ç–∏–≤–Ω—ã–π: 100-499‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îú ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: 500-999‚ÇΩ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
‚îî üëë VIP: 1,000‚ÇΩ+ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ

üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:*
‚îú –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAW:,}‚ÇΩ
‚îú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: –ö–∞—Ä—Ç–∞, QIWI, –ÆMoney, –ö—Ä–∏–ø—Ç–∞
‚îú –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫: –¥–æ 24 —á–∞—Å–æ–≤
‚îî –ö–æ–º–∏—Å—Å–∏—è: 0% (–º—ã –ø–ª–∞—Ç–∏–º –∑–∞ –≤–∞—Å!)

üéØ *–°–æ–≤–µ—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*
‚Ä¢ –ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –±–æ–Ω—É—Å–æ–º
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ"""

class KeyboardBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –±–æ—Ç–∞"""
    
    @staticmethod
    def build_main_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        keyboard = [
            [
                InlineKeyboardButton("üíé –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
            ],
            [
                InlineKeyboardButton("üöÄ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='investments'),
                InlineKeyboardButton("üë• –ü–∞—Ä—Ç–Ω—ë—Ä—ã", callback_data='referral')
            ],
            [
                InlineKeyboardButton("üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data='withdraw'),
                InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='bonus')
            ],
            [
                InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data='top'),
                InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='info')
            ],
            [
                InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')
            ]
        ]
        
        if is_admin:
            keyboard.append([
                InlineKeyboardButton("üëë –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨", callback_data='admin_panel')
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def build_admin_keyboard() -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
                InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='admin_users')
            ],
            [
                InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
                InlineKeyboardButton("üíå –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data='admin_send_user')
            ],
            [
                InlineKeyboardButton("üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data='admin_withdrawals'),
                InlineKeyboardButton("üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏", callback_data='admin_investments')
            ],
            [
                InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_block'),
                InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unblock')
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')
            ]
        ])
    
    @staticmethod
    def build_payment_keyboard(amount: int) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f'payment_card_{amount}'),
                InlineKeyboardButton("ü•ù QIWI –ö–æ—à–µ–ª—ë–∫", callback_data=f'payment_qiwi_{amount}')
            ],
            [
                InlineKeyboardButton("üíõ –ÆMoney", callback_data=f'payment_ymoney_{amount}'),
                InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f'payment_crypto_{amount}')
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='withdraw')
            ]
        ])
    
    @staticmethod
    def build_back_keyboard(callback_data: str = 'menu') -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
        return InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=callback_data)
        ]])
    
    @staticmethod
    def build_confirmation_keyboard(action: str, data: str = "") -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'confirm_{action}_{data}'),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='menu')
            ]
        ])

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.logger = BotLogger.setup_logging()
        self.db = Database()
        self.user_service = UserService(self.db)
        self.bonus_service = BonusService(self.db)
        self.withdrawal_service = WithdrawalService(self.db)
        
        self.logger.info("üöÄ Bot initialized successfully")
    
    async def handle_daily_bonus(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            user_id = update.callback_query.from_user.id
            user = self.db.get_user(user_id)
            
            if not user:
                await update.callback_query.edit_message_text(
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            can_claim, time_left = self.bonus_service.can_claim_daily_bonus(user)
            
            if not can_claim:
                hours = int(time_left.total_seconds() / 3600)
                minutes = int((time_left.total_seconds() % 3600) / 60)
                
                await update.callback_query.answer(
                    f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω",
                    show_alert=True
                )
                return
            
            if self.bonus_service.claim_daily_bonus(user):
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
                streak = self._calculate_bonus_streak(user)
                
                bonus_text = MessageBuilder.build_bonus_message(DAILY_BONUS, user.balance, streak)
                keyboard = KeyboardBuilder.build_back_keyboard('menu')
                
                await update.callback_query.edit_message_text(
                    bonus_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞", show_alert=True)
                
        except Exception as e:
            self.logger.error(f"Error in handle_daily_bonus: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞")
    
    def _calculate_bonus_streak(self, user: User) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        if user.last_bonus:
            days_diff = (datetime.now() - user.last_bonus).days
            return max(1, 7 - days_diff) if days_diff <= 1 else 1
        return 1
    
    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            query = update.callback_query
            user_id = query.from_user.id
            
            if not self.user_service.is_admin(user_id):
                await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return

            stats = self.db.get_user_statistics()
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.update({
                'total_balance': sum(u.balance for u in self.db.session.query(User).all()),
                'total_withdrawals': sum(u.withdrawals for u in self.db.session.query(User).all()),
                'total_investments': sum(u.total_invested for u in self.db.session.query(User).all()),
                'new_today': self.db.get_new_users_today_count()
            })
            
            stats_text = MessageBuilder.build_admin_panel_message(stats)
            keyboard = KeyboardBuilder.build_admin_keyboard()

            if update.callback_query:
                await query.edit_message_text(
                    stats_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    stats_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in show_admin_panel: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
            if update.message and update.message.chat.type in ['group', 'supergroup']:
                await update.message.reply_text(
                    f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`", 
                    parse_mode=ParseMode.MARKDOWN
                )
                return

            user_id = update.effective_user.id
            user_name = update.effective_user.first_name or "–î—Ä—É–≥"
            ref = context.args[0] if context.args else None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.user_service.is_blocked(user_id):
                blocked_text = """üö´ *–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù*

‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.

üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:
‚îî –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏

‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""
                
                if update.message:
                    await update.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user(user_id)
            if not user:
                ref_id = int(ref) if ref and ref.isdigit() else None
                user = await self.user_service.create_user(user_id, ref_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (–∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            if not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id)
                if not is_subscribed:
                    await show_channel_check(update, context)
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            if not user.channel_joined:
                user.channel_joined = True
                self.db.session.commit()
            
            welcome_text = MessageBuilder.build_welcome_message(user, user_name)
            keyboard = KeyboardBuilder.build_main_keyboard(self.user_service.is_admin(user_id))

            if update.callback_query:
                await update.callback_query.edit_message_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in start command: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"""
        try:
            query = update.callback_query
            await query.answer()
            user_id = query.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.user_service.is_blocked(user_id):
                await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user(user_id)
            if not user:
                await query.edit_message_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                    reply_markup=KeyboardBuilder.build_back_keyboard('menu')
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if query.data != 'check_subscription' and not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id)
                if not is_subscribed:
                    await show_channel_check(update, context)
                    return
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            await self._route_callback(update, context, query.data)
            
        except Exception as e:
            self.logger.error(f"Error in button_handler: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def _route_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∫–æ–º–∞–Ω–¥"""
        user_id = update.effective_user.id
        
        # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
        if data == 'admin_panel' and self.user_service.is_admin(user_id):
            await self.show_admin_panel(update, context)
        elif data == 'admin_stats' and self.user_service.is_admin(user_id):
            await self._show_detailed_stats(update, context)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif data == 'balance':
            await show_balance(update, context)
        elif data == 'stats':
            await self._show_user_stats(update, context)
        
        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        elif data == 'investments':
            await show_investments(update, context)
        elif data.startswith(('invest_', 'confirm_invest_', 'calc_')):
            await handle_investment_request(update, context)
        
        # –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
        elif data == 'withdraw':
            await handle_withdraw_request(update, context)
        elif data.startswith('withdraw_'):
            amount = int(data.split('_')[1])
            await handle_withdraw_request(update, context, amount)
        elif data.startswith('payment_'):
            parts = data.split('_')
            method, amount = parts[1], int(parts[2])
            await handle_payment_details(update, context, method, amount)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        elif data == 'bonus':
            await self.handle_daily_bonus(update, context)
        elif data == 'referral':
            await show_referral_program(update, context)
        elif data == 'top':
            await self._show_top_users(update, context)
        elif data == 'info':
            await self._show_info(update, context)
        elif data == 'history':
            await self._show_withdrawal_history(update, context)
        elif data == 'menu':
            await self.start(update, context)
        else:
            await self._handle_unknown_callback(update, context)
    
    async def _show_user_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            await update.callback_query.edit_message_text(
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        stats_text = MessageBuilder.build_stats_message(user)
        keyboard = KeyboardBuilder.build_back_keyboard('menu')
        
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_detailed_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        stats = self.db.get_user_statistics()
        invest_stats = self.db.get_investments_statistics()
        
        stats_text = f"""üìä *–ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: *{stats['total_users']:,}*
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['active_users']:,}*
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: *{stats['blocked_users']:,}*
‚îú –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{stats.get('new_today', 0):,}*
‚îî –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–Ω–∞–ª: *{stats.get('subscribed_users', 0):,}*

üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚îú –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{format_currency(stats.get('total_balance', 0))}*
‚îú –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: *{format_currency(stats.get('total_withdrawals', 0))}*
‚îú –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(invest_stats.get('total_investments', 0))}*
‚îú –ü—Ä–∏–±—ã–ª—å –≤—ã–ø–ª–∞—á–µ–Ω–∞: *{format_currency(invest_stats.get('total_profit_paid', 0))}*
‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{invest_stats.get('active_investments', 0):,}*

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚îú –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: *{stats.get('pending_withdrawals', 0):,}*
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: *{stats.get('total_referrals', 0):,}*
‚îî –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{format_currency(stats.get('avg_earnings', 0))}*

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"""

        keyboard = KeyboardBuilder.build_back_keyboard('admin_panel')
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _show_top_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
        try:
            top_users = self.db.session.query(User)\
                .order_by(User.total_earned.desc(), User.balance.desc())\
                .limit(10)\
                .all()
            
            top_text = "üèÜ *–¢–û–ü-10 –£–°–ü–ï–®–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
            
            medals = ["ü•á", "ü•à", "ü•â"] + [f"{i}Ô∏è‚É£" for i in range(4, 11)]
            
            for i, user in enumerate(top_users):
                try:
                    chat = await context.bot.get_chat(user.user_id)
                    name = chat.first_name[:15] + "..." if len(chat.first_name) > 15 else chat.first_name
                except:
                    name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id}"
                
                refs_count = len(user.referrals)
                investments_count = len([inv for inv in user.investments if not inv.is_finished])
                
                top_text += f"{medals[i]} *{name}*\n"
                top_text += f"‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*\n"
                top_text += f"‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{refs_count}*\n"
                top_text += f"‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: *{investments_count}*\n\n"
            
            top_text += "üí° *–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é —Ç–æ–ø–∞! –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ.*"
            
            keyboard = KeyboardBuilder.build_back_keyboard('menu')
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    top_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    top_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in _show_top_users: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    
    async def _show_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"""
        info_text = MessageBuilder.build_info_message()
        keyboard = KeyboardBuilder.build_back_keyboard('menu')
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                info_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                info_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _show_withdrawal_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            user_id = update.effective_user.id
            user = self.db.get_user(user_id)
            withdrawals = self.db.session.query(WithdrawalRequest)\
                .filter_by(user_id=user.user_id)\
                .order_by(WithdrawalRequest.date.desc())\
                .limit(10)\
                .all()
            
            if not withdrawals:
                history_text = f"""üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í*

‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW:,}‚ÇΩ
üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!"""
            else:
                history_text = "üìã *–ò–°–¢–û–†–ò–Ø –í–´–í–û–î–û–í*\n\n"
                
                total_requested = sum(w.amount for w in withdrawals)
                approved_count = len([w for w in withdrawals if w.status == 'approved'])
                
                history_text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                history_text += f"‚îú –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: *{len(withdrawals)}*\n"
                history_text += f"‚îú –û–¥–æ–±—Ä–µ–Ω–æ: *{approved_count}*\n"
                history_text += f"‚îî –°—É–º–º–∞ –∑–∞—è–≤–æ–∫: *{format_currency(total_requested)}*\n\n"
                
                for w in withdrawals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    status_emoji = {
                        'pending': '‚è≥',
                        'approved': '‚úÖ',
                        'rejected': '‚ùå'
                    }.get(w.status, '‚ùì')
                    
                    status_text = {
                        'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                        'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
                        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
                    }.get(w.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    history_text += f"üÜî *–ó–∞—è–≤–∫–∞ #{w.id}*\n"
                    history_text += f"‚îú –°—É–º–º–∞: *{format_currency(w.amount)}*\n"
                    history_text += f"‚îú –°–∏—Å—Ç–µ–º–∞: *{w.method.upper()}*\n"
                    history_text += f"‚îú –î–∞—Ç–∞: {w.date.strftime('%d.%m.%Y %H:%M')}\n"
                    history_text += f"‚îî –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n\n"
            
            keyboard = KeyboardBuilder.build_back_keyboard('menu')
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    history_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    history_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in _show_withdrawal_history: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")
    
    async def _handle_unknown_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –∫–æ–º–∞–Ω–¥"""
        await update.callback_query.edit_message_text(
            "üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n\n–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!",
            reply_markup=KeyboardBuilder.build_back_keyboard('menu'),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.user_service.is_blocked(user_id):
                await update.message.reply_text(
                    "üö´ *–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user(user_id)
            if not user:
                await update.message.reply_text(
                    "‚ùå *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                    reply_markup=KeyboardBuilder.build_back_keyboard('menu'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not self.user_service.is_admin(user_id):
                is_subscribed = await check_channel_subscription(context, user_id)
                if not is_subscribed:
                    await show_channel_check(update, context)
                    return
            
            waiting_for = context.user_data.get('waiting_for')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
            if waiting_for == 'payment_details':
                await handle_payment_details(update, context)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
            elif waiting_for == 'custom_withdrawal_amount':
                await self._handle_custom_withdrawal_amount(update, context)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            elif waiting_for and waiting_for.startswith('custom_invest_'):
                plan_type = waiting_for.replace('custom_invest_', '')
                await self._handle_custom_investment_amount(update, context, plan_type)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
            elif waiting_for in [
                'broadcast_message', 'user_id_for_message', 'user_id_to_block', 
                'user_id_to_unblock', 'manual_balance_user', 'manual_balance_amount'
            ] and self.user_service.is_admin(user_id):
                await handle_admin_message(update, context)
                return
            
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            else:
                await self._show_help_message(update, context)
                
        except Exception as e:
            self.logger.error(f"Error in handle_message: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    # ... existing code ...
    async def _handle_custom_withdrawal_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        try:
            amount_text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            try:
                amount = int(amount_text)
            except ValueError:
                await update.message.reply_text(
                    "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500",
                    reply_markup=KeyboardBuilder.build_back_keyboard('withdraw'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            user = self.db.get_user(update.effective_user.id)
            if not user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            validation = self.withdrawal_service.validate_withdrawal(user, amount)
            
            if not validation['valid']:
                await update.message.reply_text(
                    validation['error'],
                    reply_markup=KeyboardBuilder.build_back_keyboard('withdraw'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_for', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            payment_text = f"""üí∏ *–í–´–ë–û–† –°–ü–û–°–û–ë–ê –í–´–í–û–î–ê*

üí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: *{format_currency(amount)}*
üíé –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: *{format_currency(user.balance - amount)}*

üîí –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:"""

            keyboard = KeyboardBuilder.build_payment_keyboard(amount)
            await update.message.reply_text(
                payment_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            self.logger.error(f"Error in _handle_custom_withdrawal_amount: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã")
    
    async def _handle_custom_investment_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        try:
            amount_text = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            try:
                amount = int(amount_text)
            except ValueError:
                await update.message.reply_text(
                    "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000",
                    reply_markup=KeyboardBuilder.build_back_keyboard('investments'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            user = self.db.get_user(update.effective_user.id)
            if not user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
            plan_config = {
                'starter': {'min': 100, 'rate': 1.2, 'name': 'üå± –°—Ç–∞—Ä—Ç–µ—Ä'},
                'standard': {'min': 1000, 'rate': 1.8, 'name': 'üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç'},
                'premium': {'min': 5000, 'rate': 2.5, 'name': 'üöÄ –ü—Ä–µ–º–∏—É–º'},
                'vip': {'min': 20000, 'rate': 3.5, 'name': 'üëë VIP'}
            }.get(plan_type)
            
            if not plan_config:
                await update.message.reply_text(
                    "‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω*",
                    reply_markup=KeyboardBuilder.build_back_keyboard('investments'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if amount < plan_config['min']:
                await update.message.reply_text(
                    f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞*\n\n–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–ª–∞–Ω–∞ {plan_config['name']}: {plan_config['min']:,}‚ÇΩ",
                    reply_markup=KeyboardBuilder.build_back_keyboard('investments'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            if amount > user.balance:
                await update.message.reply_text(
                    f"üí∏ *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount:,}‚ÇΩ\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,}‚ÇΩ",
                    reply_markup=KeyboardBuilder.build_back_keyboard('investments'),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            context.user_data.pop('waiting_for', None)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
            daily_profit = int(amount * plan_config['rate'] / 100)
            total_profit = daily_profit * 30  # 30 –¥–Ω–µ–π
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm_text = f"""üìà *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–ù–í–ï–°–¢–ò–¶–ò–ò*

üìä –ü–ª–∞–Ω: {plan_config['name']}
üí∞ –°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: *{format_currency(amount)}*
üìà –°—Ç–∞–≤–∫–∞: *{plan_config['rate']}% –≤ –¥–µ–Ω—å*
üíµ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: *{format_currency(daily_profit)}*
üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ 30 –¥–Ω–µ–π: *{format_currency(total_profit)}*
üíé –ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: *{format_currency(amount + total_profit)}*

‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:"""

            keyboard = KeyboardBuilder.build_confirmation_keyboard('invest', f'{plan_type}_{amount}')
            await update.message.reply_text(
                confirm_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            self.logger.error(f"Error in _handle_custom_investment_amount: {e}")
            await self._send_error_message(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    
    async def _show_help_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        help_text = """‚ùì *–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£*

ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚îú /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚îú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚îî –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞

üí° *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
‚îú –ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
‚îú –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ FAQ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ
‚îî –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"""

        keyboard = KeyboardBuilder.build_back_keyboard('menu')
        await update.message.reply_text(
            help_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        try:
            error = context.error
            self.logger.error(f"Update {update} caused error {error}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            stats = self.db.get_user_statistics()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = f"""üö® *–°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê*

üÜî Update ID: `{update.update_id if update else 'Unknown'}`
üë§ User ID: `{update.effective_user.id if update and update.effective_user else 'Unknown'}`
üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['active_users']}*
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚ö†Ô∏è –û—à–∏–±–∫–∞: `{str(error)[:200]}...`

üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=error_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as admin_error:
                    self.logger.error(f"Failed to send error message to admin {admin_id}: {admin_error}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if update and update.effective_chat:
                try:
                    error_user_text = """‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞*

üîß –ú—ã —É–∂–µ –∑–Ω–∞–µ–º –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
‚îú –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
‚îî –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"""
                    
                    keyboard = KeyboardBuilder.build_back_keyboard('menu')
                    
                    if update.callback_query:
                        await update.callback_query.edit_message_text(
                            error_user_text,
                            reply_markup=keyboard,
                            parse_mode=ParseMode.MARKDOWN
                        )
                    elif update.message:
                        await update.message.reply_text(
                            error_user_text,
                            reply_markup=keyboard,
                            parse_mode=ParseMode.MARKDOWN
                        )
                except Exception as user_error:
                    self.logger.error(f"Failed to send error message to user: {user_error}")
                    
        except Exception as handler_error:
            self.logger.critical(f"Error in error_handler: {handler_error}")
    
    async def _send_error_message(self, update: Update, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            error_text = f"‚ö†Ô∏è *{message}*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            keyboard = KeyboardBuilder.build_back_keyboard('menu')
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    error_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
            elif update.message:
                await update.message.reply_text(
                    error_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            self.logger.error(f"Error in _send_error_message: {e}")
    
    def setup_handlers(self, application: Application) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
        try:
            # –ö–æ–º–∞–Ω–¥—ã
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CommandHandler("admin", handle_admin_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            application.add_handler(CallbackQueryHandler(self.button_handler))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            application.add_error_handler(self.error_handler)
            
            self.logger.info("‚úÖ All handlers registered successfully")
            
        except Exception as e:
            self.logger.error(f"Error setting up handlers: {e}")
            raise
    
    async def post_init(self, application: Application) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            self.logger.info("ü§ñ Bot started successfully")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ
            bot_info = await application.bot.get_me()
            startup_message = f"""üöÄ *–ë–û–¢ –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û*

ü§ñ –ò–º—è: *{bot_info.first_name}*
üÜî ID: `{bot_info.id}`
üë§ Username: @{bot_info.username}
üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã"""

            for admin_id in ADMIN_IDS:
                try:
                    await application.bot.send_message(
                        chat_id=admin_id,
                        text=startup_message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    self.logger.warning(f"Failed to send startup message to admin {admin_id}: {e}")
                    
        except Exception as e:
            self.logger.error(f"Error in post_init: {e}")
    
    async def cleanup(self, application: Application) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            self.logger.info("üõë Bot shutdown initiated")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self.db, 'session'):
                self.db.session.close()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
            shutdown_message = f"""üõë *–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù*

üïê –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚ö†Ô∏è –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üîß –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã"""

            for admin_id in ADMIN_IDS:
                try:
                    await application.bot.send_message(
                        chat_id=admin_id,
                        text=shutdown_message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    self.logger.warning(f"Failed to send shutdown message to admin {admin_id}: {e}")
                    
            self.logger.info("‚úÖ Bot shutdown completed")
            
        except Exception as e:
            self.logger.error(f"Error in cleanup: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        telegram_bot = TelegramBot()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        telegram_bot.setup_handlers(application)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—É–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        application.post_init = telegram_bot.post_init
        application.post_shutdown = telegram_bot.cleanup
        
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        app_url = os.getenv('APP_URL')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º cron —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        if app_url:
            cron_server = CronServer(app_url)
            await cron_server.start()
        else:
            telegram_bot.logger.warning("APP_URL not set in environment variables")
        
        telegram_bot.logger.info("üöÄ Starting telegram bot...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞ –¥–ª—è Render
        port = int(os.getenv('PORT', '8080'))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling(
            poll_interval=1.0,
            timeout=10,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            drop_pending_updates=True,
            webhook_url=f"https://{os.getenv('APP_URL')}/{TOKEN}/webhook"
        )
        
    except KeyboardInterrupt:
        telegram_bot.logger.info("üõë Bot stopped by user")
    except Exception as e:
        telegram_bot.logger.critical(f"Critical error in main: {e}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if 'cron_server' in locals():
            await cron_server.stop()
        telegram_bot.logger.info("üèÅ Application terminated")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Critical error: {e}")