import logging
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
DATA_FILE = 'users_data.json'
BLOCKED_USERS_FILE = 'blocked_users.json'
MIN_WITHDRAW = int(os.getenv('MIN_WITHDRAW', 50))
DAILY_BONUS = int(os.getenv('DAILY_BONUS', 2))
REFERRAL_BONUS = int(os.getenv('REFERRAL_BONUS', 5))

# –ß–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
ANALYTICS_CHAT_ID = os.getenv('ANALYTICS_CHAT_ID')

# üëë –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞
ADMIN_IDS = [int(id_) for id_ in os.getenv('ADMIN_IDS', '').split(',') if id_]

# üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = os.getenv('CHANNEL_ID')
CHANNEL_LINK = os.getenv('CHANNEL_LINK')
CHANNEL_NAME = os.getenv('CHANNEL_NAME')

# üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# üíæ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {int(k): v for k, v in data.items()}
        except (json.JSONDecodeError, ValueError):
            logging.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
    return {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        data_to_save = {str(k): v for k, v in users.items()}
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2, default=str)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_blocked_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if os.path.exists(BLOCKED_USERS_FILE):
        try:
            with open(BLOCKED_USERS_FILE, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except (json.JSONDecodeError, ValueError):
            logging.warning("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return set()

def save_blocked_users():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(BLOCKED_USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(blocked_users), f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
users = load_users_data()
blocked_users = load_blocked_users()

# üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS

# üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
def is_blocked(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return user_id in blocked_users

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_channel_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# üéØ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user(user_id: int, ref_id: int = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    users[user_id] = {
        'balance': 0,
        'referrals': [],
        'last_bonus': datetime.min.isoformat(),
        'total_earned': 0,
        'withdrawals': 0,
        'join_date': datetime.now().isoformat(),
        'channel_joined': False
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if ref_id and ref_id != user_id and ref_id in users:
        if user_id not in users[ref_id]['referrals']:
            users[ref_id]['balance'] += REFERRAL_BONUS
            users[ref_id]['total_earned'] += REFERRAL_BONUS
            users[ref_id]['referrals'].append(user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ {ref_id}")
    
    save_users_data()

# üì¢ –≠–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def show_channel_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    user_name = update.effective_user.first_name or "–î—Ä—É–≥"
    
    channel_text = f"""üîí *–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*

üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:

üéØ *{CHANNEL_NAME}*

üíé –í –∫–∞–Ω–∞–ª–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ üöÄ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
‚Ä¢ üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

üëá –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]
    ]
    
    if update.message:
        await update.message.reply_text(
            channel_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                channel_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except TelegramError:
            await update.callback_query.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")

# üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_subscription_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
        return

    is_subscribed = await check_channel_subscription(context, user_id)

    if is_subscribed:
        if user_id in users:
            users[user_id]['channel_joined'] = True
            save_users_data()

        await query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        await start(update, context)
    else:
        await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        await show_channel_check(update, context)

# üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    admin_text = """üëë *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨*

üéõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üì¢ –†–∞—Å—Å—ã–ª–∫–∞:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data='admin_stats'),
         InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='admin_users')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data='admin_broadcast'),
         InlineKeyboardButton("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='admin_send_user')],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_block'),
         InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unblock')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
    ]
    
    if update.message:
        await update.message.reply_text(
            admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.callback_query.edit_message_text(
            admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞
    if update.message and update.message.chat.type in ['group', 'supergroup']:
        await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`", parse_mode=ParseMode.MARKDOWN)
        return

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–î—Ä—É–≥"
    ref = context.args[0] if context.args else None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        blocked_text = """üö´ *–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*

‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.

üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        
        if update.message:
            await update.message.reply_text(blocked_text, parse_mode=ParseMode.MARKDOWN)
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in users:
        ref_id = int(ref) if ref and ref.isdigit() else None
        create_user(user_id, ref_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (–∞–¥–º–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if not is_admin(user_id):
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    users[user_id]['channel_joined'] = True
    save_users_data()
    
    # üé® –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='balance'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data='bonus'),
         InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='referral')],
        [InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data='withdraw'),
         InlineKeyboardButton("‚ÑπÔ∏è –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='info')],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='top'),
         InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨", callback_data='admin_panel')])
    
    welcome_text = f"""üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

üíé –í—ã –≤ —Å–∞–º–æ–º –∫—Ä—É—Ç–æ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫-–±–æ—Ç–µ Telegram!

üöÄ *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:*
‚Ä¢ üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π
‚Ä¢ üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ üí∏ –í—ã–≤–æ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
‚Ä¢ üèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ

‚ú® –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
    
    if update.message:
        await update.message.reply_text(
            welcome_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except TelegramError:
            await update.callback_query.message.reply_text(
                welcome_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if is_blocked(user_id):
        await query.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users:
        await query.edit_message_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='menu')
            ]])
        )
        return
    
    # –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
    if query.data == 'admin_panel' and is_admin(user_id):
        await show_admin_panel(update, context)
        return
    
    elif query.data == 'admin_stats' and is_admin(user_id):
        total_users = len(users)
        total_balance = sum(user.get('balance', 0) for user in users.values())
        total_earned = sum(user.get('total_earned', 0) for user in users.values())
        total_withdrawals = sum(user.get('withdrawals', 0) for user in users.values())
        blocked_count = len(blocked_users)
        
        stats_text = f"""üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: *{blocked_count}*
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: *{total_balance} ‚ÇΩ*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{total_earned} ‚ÇΩ*
üí∏ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: *{total_withdrawals} ‚ÇΩ*

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(back_button),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    elif query.data == 'admin_broadcast' and is_admin(user_id):
        context.user_data['waiting_for'] = 'broadcast_message'
        await query.edit_message_text(
            "üì¢ *–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    elif query.data == 'admin_send_user' and is_admin(user_id):
        context.user_data['waiting_for'] = 'user_id_for_message'
        await query.edit_message_text(
            "üí¨ *–û–¢–ü–†–ê–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    elif query.data == 'admin_block' and is_admin(user_id):
        context.user_data['waiting_for'] = 'user_id_to_block'
        await query.edit_message_text(
            "üö´ *–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    elif query.data == 'admin_unblock' and is_admin(user_id):
        context.user_data['waiting_for'] = 'user_id_to_unblock'
        await query.edit_message_text(
            "‚úÖ *–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')
            ]]),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if query.data != 'check_subscription' and not is_admin(user_id):
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return
    
    user = users[user_id]
    back_button = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if query.data == 'balance':
        balance_text = f"""üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*

üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{user['balance']} ‚ÇΩ*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{user.get('total_earned', 0)} ‚ÇΩ*
üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: *{user.get('withdrawals', 0)} ‚ÇΩ*
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{len(user['referrals'])}*

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.fromisoformat(user.get('join_date', datetime.now().isoformat())).strftime('%d.%m.%Y')}"""
        
        await query.edit_message_text(
            balance_text,
            reply_markup=InlineKeyboardMarkup(back_button),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'stats':
        join_date = datetime.fromisoformat(user.get('join_date', datetime.now().isoformat()))
        days_active = (datetime.now() - join_date).days + 1
        avg_daily = round(user.get('total_earned', 0) / days_active, 2) if days_active > 0 else 0
        
        stats_text = f"""üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üéØ –î–Ω–µ–π –≤ –±–æ—Ç–µ: *{days_active}*
üìà –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: *{avg_daily} ‚ÇΩ*
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(user['referrals'])}*
üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–Ω—É—Å: {datetime.fromisoformat(user['last_bonus']).strftime('%d.%m.%Y') if user['last_bonus'] != datetime.min.isoformat() else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}
üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user.get('channel_joined', False) else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {'ü•á VIP' if user['balance'] >= 100 else 'ü•à –ê–∫—Ç–∏–≤–Ω—ã–π' if user['balance'] >= 50 else 'ü•â –ù–æ–≤–∏—á–æ–∫'}"""
        
        await query.edit_message_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(back_button),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'bonus':
        now = datetime.now()
        last_bonus = datetime.fromisoformat(user['last_bonus']) if user['last_bonus'] != datetime.min.isoformat() else datetime.min
        
        if now - last_bonus >= timedelta(days=1):
            user['balance'] += DAILY_BONUS
            user['total_earned'] = user.get('total_earned', 0) + DAILY_BONUS
            user['last_bonus'] = now.isoformat()
            save_users_data()
            
            bonus_text = f"""üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*

‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!
üí∞ +{DAILY_BONUS} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å

üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{user['balance']} ‚ÇΩ*

üî• –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"""
        else:
            remaining = timedelta(days=1) - (now - last_bonus)
            hours = remaining.seconds // 3600
            minutes = (remaining.seconds // 60) % 60
            
            bonus_text = f"""‚è∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*

‚è≥ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑:
üïê *{hours} —á. {minutes} –º–∏–Ω.*

üí° *–°–æ–≤–µ—Ç:* –ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ {REFERRAL_BONUS} ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ!"""
        
        await query.edit_message_text(
            bonus_text,
            reply_markup=InlineKeyboardMarkup(back_button),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'referral':
        username = context.bot.username
        ref_link = f"https://t.me/{username}?start={user_id}"
        
        referral_text = f"""üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ *{REFERRAL_BONUS} ‚ÇΩ* –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞!

üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
`{ref_link}`

üìä *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: *{len(user['referrals'])}* –¥—Ä—É–∑–µ–π
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(user['referrals']) * REFERRAL_BONUS} ‚ÇΩ*

üöÄ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º
2Ô∏è‚É£ –û–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç –±–æ—Ç–∞
3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {REFERRAL_BONUS} ‚ÇΩ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!

üí° *–í–∞–∂–Ω–æ:* –î—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!"""
        
        share_button = [
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url={ref_link}&text=üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫—Ä—É—Ç–æ–º—É –∑–∞—Ä–∞–±–æ—Ç–æ–∫-–±–æ—Ç—É! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
        ]
        
        await query.edit_message_text(
            referral_text,
            reply_markup=InlineKeyboardMarkup(share_button),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'withdraw':
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        total_earned = user.get('total_earned', 0)
        total_withdrawn = user.get('withdrawals', 0)
        pending_withdrawals = sum(
            w['amount'] 
            for w in user.get('withdrawals_history', []) 
            if w['status'] == 'pending'
        )
        
        withdraw_buttons = []
        if user['balance'] >= MIN_WITHDRAW:
            withdraw_buttons = [
                [InlineKeyboardButton(f"üí∏ –í—ã–≤–µ—Å—Ç–∏ {MIN_WITHDRAW} ‚ÇΩ", callback_data=f'confirm_withdraw_{MIN_WITHDRAW}')],
                [InlineKeyboardButton(f"üí∞ –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë ({user['balance']} ‚ÇΩ)", callback_data=f'confirm_withdraw_{user['balance']}')],
                [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data='history')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
            ]
            
            withdraw_text = f"""üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üí∞ –ë–∞–ª–∞–Ω—Å: *{user['balance']} ‚ÇΩ*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{total_earned} ‚ÇΩ*
üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: *{total_withdrawn} ‚ÇΩ*
‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: *{pending_withdrawals} ‚ÇΩ*

‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: *{MIN_WITHDRAW} ‚ÇΩ*
‚ö°Ô∏è –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã

üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"""
        else:
            needed = MIN_WITHDRAW - user['balance']
            withdraw_buttons = [
                [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='referral')],
                [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data='bonus')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
            ]
            withdraw_text = f"""‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{user['balance']} ‚ÇΩ*
üí≥ –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: *{MIN_WITHDRAW} ‚ÇΩ*
üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: *{needed} ‚ÇΩ*

üöÄ *–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:*
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ {max(1, needed // REFERRAL_BONUS)} –¥—Ä—É–∑–µ–π (+{REFERRAL_BONUS} ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)
‚Ä¢ üéÅ –ü–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (+{DAILY_BONUS} ‚ÇΩ)
‚Ä¢ üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
        
        await query.edit_message_text(
            withdraw_text,
            reply_markup=InlineKeyboardMarkup(withdraw_buttons),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
    elif query.data.startswith('confirm_withdraw_'):
        amount = int(query.data.split('_')[-1])
        await handle_withdraw_request(update, context, amount)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    elif query.data.startswith('payment_'):
        await handle_payment_method(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥
    elif query.data.startswith(('approve_', 'reject_')):
        await handle_withdrawal_action(update, context)
    
    elif query.data == 'top':
        await show_top_users(update, context)
    
    elif query.data == 'info':
        await show_info(update, context)
    
    elif query.data == 'history':
        await show_withdrawal_history(update, context)
    
    elif query.data == 'menu':
        await start(update, context)

async def handle_withdraw_request(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    user = users[user_id]
    
    if amount < MIN_WITHDRAW:
        await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW} ‚ÇΩ", show_alert=True)
        return
    
    if amount > user['balance']:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return
    
    payment_keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f'payment_card_{amount}')],
        [InlineKeyboardButton("üí∞ QIWI", callback_data=f'payment_qiwi_{amount}')],
        [InlineKeyboardButton("üì± –ÆMoney", callback_data=f'payment_ymoney_{amount}')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='withdraw')]
    ]
    
    payment_text = f"""üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞*

üí∞ –°—É–º–º–∞: *{amount} ‚ÇΩ*
‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞"""

    await query.edit_message_text(
        payment_text,
        reply_markup=InlineKeyboardMarkup(payment_keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    user = users[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∏ —Å—É–º–º—É –∏–∑ callback_data
    _, method, amount = query.data.split('_')
    amount = int(amount)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
    if amount > user['balance']:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return
    
    if amount < MIN_WITHDRAW:
        await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW} ‚ÇΩ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data['withdraw'] = {
        'amount': amount,
        'method': method,
        'user_id': user_id
    }
    
    await query.edit_message_text(
        f"""üí≥ *–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*

üí∞ –°—É–º–º–∞: *{amount} ‚ÇΩ*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{method.upper()}*

‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:""",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='withdraw')
        ]]),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    context.user_data['waiting_for'] = 'payment_details'

async def handle_withdrawal_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    try:
        action, withdrawal_id = query.data.split('_')
    except ValueError:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    action, withdrawal_id = query.data.split('_')
    
    # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏
    withdrawal = None
    withdrawal_user = None
    for u_id, user_data in users.items():
        if 'withdrawals_history' in user_data:
            for w in user_data['withdrawals_history']:
                if w['id'] == withdrawal_id:
                    withdrawal = w
                    withdrawal_user = u_id
                    break
            if withdrawal:
                break
    
    if not withdrawal:
        await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if action == 'approve':
        withdrawal['status'] = 'approved'
        await notify_withdrawal_status(context, withdrawal_user, withdrawal, True)
    else:
        withdrawal['status'] = 'rejected'
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        users[withdrawal_user]['balance'] += withdrawal['amount']
        await notify_withdrawal_status(context, withdrawal_user, withdrawal, False)
    
    save_users_data()
    await query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)

async def notify_withdrawal_status(context: ContextTypes.DEFAULT_TYPE, user_id: int, withdrawal: dict, approved: bool):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–≤–æ–¥–∞"""
    if approved:
        text = f"""‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!*

üí∞ –°—É–º–º–∞: *{withdrawal['amount']} ‚ÇΩ*
üí≥ –ú–µ—Ç–æ–¥: *{withdrawal['method'].upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal['id']}`

‚ö°Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"""
    else:
        text = f"""‚ùå *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*

üí∞ –°—É–º–º–∞: *{withdrawal['amount']} ‚ÇΩ*
üí≥ –ú–µ—Ç–æ–¥: *{withdrawal['method'].upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal['id']}`

üíµ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å
üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

    try:
        await context.bot.send_message(
            user_id,
            text,
            parse_mode=ParseMode.MARKDOWN
        )
    except TelegramError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def notify_admins_about_withdrawal(context: ContextTypes.DEFAULT_TYPE, user_id: int, withdrawal: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥"""
    try:
        user = await context.bot.get_chat(user_id)
        user_mention = f"[{user.first_name}](tg://user?id={user_id})"
    except:
        user_mention = f"User ID: `{user_id}`"
    
    admin_message = f"""üí∞ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_mention}
üíµ –°—É–º–º–∞: *{withdrawal['amount']} ‚ÇΩ*
üí≥ –°–ø–æ—Å–æ–±: *{withdrawal['method'].upper()}*
üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{withdrawal['details']}`
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal['id']}`
üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(withdrawal['date']).strftime('%d.%m.%Y %H:%M')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
‚Ä¢ –ë–∞–ª–∞–Ω—Å: *{users[user_id]['balance']} ‚ÇΩ*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{users[user_id].get('total_earned', 0)} ‚ÇΩ*
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{len(users[user_id]['referrals'])}*"""

    keyboard = [[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{withdrawal['id']}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{withdrawal['id']}")
    ]]

    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def show_top_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É
    sorted_users = sorted(
        users.items(),
        key=lambda x: (x[1].get('total_earned', 0), x[1].get('balance', 0)),
        reverse=True
    )[:10]
    
    top_text = "üèÜ *–¢–û–ü-10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n\n"
    
    for i, (user_id, user_data) in enumerate(sorted_users, 1):
        try:
            user = await context.bot.get_chat(user_id)
            name = user.first_name
        except:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        earned = user_data.get('total_earned', 0)
        refs = len(user_data.get('referrals', []))
        
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
        top_text += f"{medal} {name}\n"
        top_text += f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{earned} ‚ÇΩ*\n"
        top_text += f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{refs}*\n\n"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            top_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            top_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"""
    info_text = f"""‚ÑπÔ∏è *–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ—Ç–µ*

üí∞ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:*

1Ô∏è‚É£ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ {REFERRAL_BONUS} ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ –î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª

2Ô∏è‚É£ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å*
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ {DAILY_BONUS} ‚ÇΩ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
‚Ä¢ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–Ω–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞

3Ô∏è‚É£ *–£—Ä–æ–≤–Ω–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*
‚Ä¢ ü•â –ù–æ–≤–∏—á–æ–∫ (0-49 ‚ÇΩ)
‚Ä¢ ü•à –ê–∫—Ç–∏–≤–Ω—ã–π (50-99 ‚ÇΩ)
‚Ä¢ ü•á VIP (100+ ‚ÇΩ)

4Ô∏è‚É£ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAW} ‚ÇΩ
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ"""

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            info_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            info_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_withdrawal_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤"""
    user_id = update.effective_user.id
    user = users[user_id]
    
    if 'withdrawals_history' not in user or not user['withdrawals_history']:
        history_text = """üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤*

‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    else:
        history_text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤*\n\n"
        for w in reversed(user['withdrawals_history']):
            status = {
                'pending': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
            }.get(w['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            history_text += f"""üÜî –ó–∞—è–≤–∫–∞ `{w['id']}`
üí∞ –°—É–º–º–∞: *{w['amount']} ‚ÇΩ*
üí≥ –ú–µ—Ç–æ–¥: *{w['method'].upper()}*
üìÖ –î–∞—Ç–∞: {datetime.fromisoformat(w['date']).strftime('%d.%m.%Y %H:%M')}
üìå –°—Ç–∞—Ç—É—Å: {status}\n\n"""
    
    keyboard = [
        [InlineKeyboardButton("üí∏ –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥", callback_data='withdraw')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            history_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if 'waiting_for' not in context.user_data:
        return
    
    waiting_for = context.user_data['waiting_for']
    
    if waiting_for == 'payment_details':
        if 'withdraw' not in context.user_data:
            await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–≤–æ–¥ –∑–∞–Ω–æ–≤–æ.")
            return
            
        withdraw_data = context.user_data['withdraw']
        details = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if withdraw_data['amount'] < MIN_WITHDRAW:
            await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAW} ‚ÇΩ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if withdraw_data['amount'] > users[user_id]['balance']:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
        withdrawal = {
            'id': f"W{int(datetime.now().timestamp())}",
            'amount': withdraw_data['amount'],
            'method': withdraw_data['method'],
            'details': details,
            'status': 'pending',
            'date': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        if 'withdrawals_history' not in users[user_id]:
            users[user_id]['withdrawals_history'] = []
        users[user_id]['withdrawals_history'].append(withdrawal)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
        users[user_id]['balance'] -= withdrawal['amount']
        users[user_id]['withdrawals'] = users[user_id].get('withdrawals', 0) + withdrawal['amount']
        save_users_data()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success_text = f"""‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!*

üí∞ –°—É–º–º–∞: *{withdrawal['amount']} ‚ÇΩ*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{withdrawal['method'].upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal['id']}`

‚è≥ –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ 24 —á–∞—Å–æ–≤
üì± –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤"
‚ö°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ"""

        keyboard = [
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤", callback_data='history')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
        ]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_withdrawal(context, user_id, withdrawal)
        await update.message.reply_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_notify = f"""üí∞ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`
üíµ –°—É–º–º–∞: *{withdrawal['amount']} ‚ÇΩ*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{withdrawal['method'].upper()}*
üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{details}`
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal['id']}`"""

        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    admin_id,
                    admin_notify,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'approve_{withdrawal["id"]}'),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{withdrawal["id"]}')
                    ]])
                )
            except TelegramError:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        del context.user_data['withdraw']
        del context.user_data['waiting_for']
    
    elif waiting_for == 'broadcast_message' and is_admin(user_id):
        message = update.message.text
        success_count = 0
        fail_count = 0
        
        for uid in users.keys():
            try:
                await context.bot.send_message(
                    uid,
                    message,
                    parse_mode=ParseMode.MARKDOWN
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                fail_count += 1
        
        result_text = f"""üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *{success_count}*
‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: *{fail_count}*
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{len(users)}*"""
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]
        await update.message.reply_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        del context.user_data['waiting_for']

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='menu')
                ]])
            )
    except:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

async def send_analytics(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    if not ANALYTICS_CHAT_ID:
        logger.error("ANALYTICS_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return
        
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        chat = await context.bot.get_chat(ANALYTICS_CHAT_ID)
        if not chat:
            logger.error(f"–ß–∞—Ç —Å ID {ANALYTICS_CHAT_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        now = datetime.now()
        message_text = f"""ü§ñ *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*
üìÖ {now.strftime('%d.%m.%Y %H:%M')}

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üîÑ –†–µ–∂–∏–º: {"Webhook" if os.getenv('RENDER') else "Polling"}"""
        
        try:
            await context.bot.send_message(
                chat_id=ANALYTICS_CHAT_ID,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN
            )
            logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞: {str(e)}")
        return

    try:
        await context.bot.send_message(
            chat_id=ANALYTICS_CHAT_ID,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        return
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode=ParseMode.MARKDOWN)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chatid", get_chat_id))
    application.add_handler(CallbackQueryHandler(handle_subscription_check, pattern="^check_subscription$"))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    job_queue = application.job_queue
    job_queue.run_repeating(send_analytics, interval=300, first=10)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    async def send_startup_message(context: ContextTypes.DEFAULT_TYPE):
        if ANALYTICS_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=ANALYTICS_CHAT_ID,
                    text="üöÄ *–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!*\n\nüìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " + datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                    parse_mode=ParseMode.MARKDOWN
                )
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ
    application.job_queue.run_once(send_startup_message, when=1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (webhook –¥–ª—è Render.com, polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if os.getenv('RENDER'):
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ Render.com
        port = int(os.getenv('PORT', 3000))
        webhook_url = f"{os.getenv('RENDER_EXTERNAL_URL')}/{TOKEN}"
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await application.bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {webhook_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ webhook
        application.run_webhook(
            listen='0.0.0.0',
            port=port,
            url_path=TOKEN,
            webhook_url=webhook_url,
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"],
            pool_timeout=30
        )

if __name__ == '__main__':
    try:
        import asyncio
        if not asyncio.get_event_loop().is_running():
            asyncio.run(main())
        else:
            asyncio.get_event_loop().create_task(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)