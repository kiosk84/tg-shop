from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import MIN_WITHDRAW, ADMIN_IDS
from utils.keyboards import Keyboards
from utils.database import Database
from utils.helpers import format_currency, validate_amount, validate_payment_details

db = Database()

async def handle_withdraw_request(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    user = db.get_user(user_id)
    
    if not user:
        await query.edit_message_text(
            text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    if amount:
        if amount > user.balance:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        keyboard = Keyboards.payment_methods(amount)
        await query.edit_message_text(
            text=f"""üí≥ *–í—ã–≤–æ–¥ {amount}‚ÇΩ*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:""",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    keyboard = Keyboards.withdrawal_menu(user.balance)
    
    if user.balance < MIN_WITHDRAW:
        needed = MIN_WITHDRAW - user.balance
        withdraw_text = f"""‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
üí≥ –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: *{format_currency(MIN_WITHDRAW)}*
üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: *{format_currency(needed)}*

üöÄ *–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å:*
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
‚Ä¢ üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    else:
        withdraw_text = f"""üí∏ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üí∞ –ë–∞–ª–∞–Ω—Å: *{format_currency(user.balance)}*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(user.total_earned)}*
üí∏ –í—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(user.withdrawals)}*

‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: *{format_currency(MIN_WITHDRAW)}*
‚ö°Ô∏è –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã

üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"""

    await query.edit_message_text(
        text=withdraw_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def process_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∏ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('confirm_withdraw_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã
        amount = float(data.split('_')[-1])
        user = db.get_user(user_id)
        
        if amount > user.balance:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return
        
        if amount < MIN_WITHDRAW:
            await query.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {format_currency(MIN_WITHDRAW)}", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        keyboard = Keyboards.payment_methods(amount)
        payment_text = f"""üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞*

üí∞ –°—É–º–º–∞: *{format_currency(amount)}*
‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üîí –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞"""

        await query.edit_message_text(
            text=payment_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    elif data.startswith('payment_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        _, method, amount = data.split('_')
        amount = float(amount)
        
        context.user_data['withdraw'] = {
            'amount': amount,
            'method': method,
            'user_id': user_id
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        method_names = {
            'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã',
            'qiwi': 'QIWI –∫–æ—à–µ–ª—å–∫–∞',
            'ymoney': '–ÆMoney'
        }
        
        await query.edit_message_text(
            f"""üí≥ *–í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è {method_names[method]}*

üí∞ –°—É–º–º–∞: *{format_currency(amount)}*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{method.upper()}*

‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:""",
            reply_markup=Keyboards.cancel_action('withdraw'),
            parse_mode=ParseMode.MARKDOWN
        )
        
        context.user_data['waiting_for'] = 'payment_details'

async def handle_payment_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    if 'withdraw' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–≤–æ–¥ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=Keyboards.back_to_menu()
        )
        return
    
    withdraw_data = context.user_data['withdraw']
    details = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    is_valid, error_msg = validate_payment_details(withdraw_data['method'], details)
    if not is_valid:
        await update.message.reply_text(
            error_msg,
            reply_markup=Keyboards.cancel_action('withdraw')
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    user_id = withdraw_data['user_id']
    amount = withdraw_data['amount']
    method = withdraw_data['method']
    
    withdrawal = db.create_withdrawal_request(user_id, amount, method, details)
    if not withdrawal:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_to_menu()
        )
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success_text = f"""‚úÖ *–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!*

üí∞ –°—É–º–º–∞: *{format_currency(amount)}*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{method.upper()}*
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal.id}`

‚è≥ –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ 24 —á–∞—Å–æ–≤
üì± –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤"
‚ö°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ"""

    await update.message.reply_text(
        success_text,
        reply_markup=Keyboards.withdrawal_history(),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    await notify_admins_withdrawal(context, user_id, withdrawal)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del context.user_data['withdraw']
    del context.user_data['waiting_for']

async def notify_admins_withdrawal(context: ContextTypes.DEFAULT_TYPE, user_id: int, withdrawal):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    admin_text = f"""üí∞ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î*

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`
üíµ –°—É–º–º–∞: *{format_currency(withdrawal.amount)}*
üí≥ –°–∏—Å—Ç–µ–º–∞: *{withdrawal.method.upper()}*
üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã: `{withdrawal.details}`
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: `{withdrawal.id}`
üìÖ –î–∞—Ç–∞: {withdrawal.date.strftime('%d.%m.%Y %H:%M')}"""

    keyboard = Keyboards.admin_withdrawal_actions(withdrawal.id)
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")