from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config import ADMIN_IDS
from utils.database import Database
from utils.keyboards import Keyboards
from utils.helpers import format_currency

db = Database()

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    stats = db.get_user_statistics()
    admin_text = f"""üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: *{stats['active_users']}*
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: *{stats['blocked_users']}*

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')],
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='admin_send_user'),
         InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_block')],
        [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unblock')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=admin_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    command = query.data
    
    if command == 'admin_stats':
        stats = db.get_global_statistics()
        stats_text = f"""üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: *{format_currency(stats['total_balance'])}*
üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: *{format_currency(stats['total_earned'])}*
üí∏ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: *{format_currency(stats['total_withdrawals'])}*
üìà –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *{format_currency(stats['total_investments'])}*
üíé –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: *{format_currency(stats['total_profit'])}*

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""

        keyboard = Keyboards.back_to_admin()
        await query.edit_message_text(
            text=stats_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

    elif command == 'admin_broadcast':
        context.user_data['waiting_for'] = 'broadcast_message'
        await query.edit_message_text(
            text="üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=Keyboards.cancel_action('admin_panel'),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif command == 'admin_block':
        context.user_data['waiting_for'] = 'user_id_to_block'
        await query.edit_message_text(
            text="üö´ *–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=Keyboards.cancel_action('admin_panel'),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif command == 'admin_unblock':
        context.user_data['waiting_for'] = 'user_id_to_unblock'
        await query.edit_message_text(
            text="‚úÖ *–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=Keyboards.cancel_action('admin_panel'),
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        return
    
    waiting_for = context.user_data.get('waiting_for')
    if not waiting_for:
        return

    message = update.message.text
    
    if waiting_for == 'broadcast_message':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success = 0
        failed = 0
        users = db.get_all_users()
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user.user_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN
                )
                success += 1
            except Exception:
                failed += 1

        stats = db.get_user_statistics()
        result = f"""üì¢ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏*

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: *{success}*
‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: *{failed}*
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*"""

        await update.message.reply_text(
            text=result,
            reply_markup=Keyboards.back_to_admin(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif waiting_for in ['user_id_to_block', 'user_id_to_unblock']:
        try:
            target_id = int(message)
            user = db.get_user(target_id)
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=Keyboards.back_to_admin()
                )
                return

            if waiting_for == 'user_id_to_block':
                db.block_user(target_id)
                action = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            else:
                db.unblock_user(target_id)
                action = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É—Å–ø–µ—à–Ω–æ {action}",
                reply_markup=Keyboards.back_to_admin()
            )
        
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID",
                reply_markup=Keyboards.back_to_admin()
            )
    
    del context.user_data['waiting_for']