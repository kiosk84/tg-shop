from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.database import Database
from models.user import User, Investment
from datetime import datetime, timedelta
from decimal import Decimal

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
INVESTMENT_PLANS = {
    'basic': {
        'name': '–ë–∞–∑–æ–≤—ã–π',
        'min_amount': 100,
        'daily_profit': 0.01,
        'emoji': 'ü•â'
    },
    'advanced': {
        'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
        'min_amount': 500,
        'daily_profit': 0.015,
        'emoji': 'ü•à'
    },
    'vip': {
        'name': 'VIP',
        'min_amount': 1000,
        'daily_profit': 0.02,
        'emoji': 'ü•á'
    }
}

async def show_investments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("ü•â –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω", callback_data='invest_basic'),
            InlineKeyboardButton("ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–ª–∞–Ω", callback_data='invest_advanced')
        ],
        [
            InlineKeyboardButton("ü•á VIP –ø–ª–∞–Ω", callback_data='invest_vip'),
            InlineKeyboardButton("üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='invest_stats')
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """üíé *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã*:

ü•â *–ë–∞–∑–æ–≤—ã–π*:
‚îú –ú–∏–Ω–∏–º—É–º: 100‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 1% –≤ –¥–µ–Ω—å

ü•à *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π*:
‚îú –ú–∏–Ω–∏–º—É–º: 500‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 1.5% –≤ –¥–µ–Ω—å

ü•á *VIP*:
‚îú –ú–∏–Ω–∏–º—É–º: 1000‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 2% –≤ –¥–µ–Ω—å"""

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def handle_investment_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'invest_stats':
        db = Database()
        user = db.get_user(update.effective_user.id)
        
        if user:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            active_investments = [inv for inv in user.investments if not inv.is_finished]
            total_profit = sum(inv.current_profit for inv in user.investments)
            
            stats_text = f"""üìä *–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏*:

üí∞ –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {user.total_invested}‚ÇΩ
üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_profit}‚ÇΩ
üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {len(active_investments)}"""

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if active_investments:
                stats_text += "\n\n*–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:*"
                for inv in active_investments:
                    plan = INVESTMENT_PLANS[inv.plan_type]
                    stats_text += f"\n{plan['emoji']} {plan['name']}: {inv.amount}‚ÇΩ (+{inv.current_profit}‚ÇΩ)"
        else:
            stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"

        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')]]
        await query.edit_message_text(
            text=stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
    if query.data.startswith('invest_'):
        plan_type = query.data.replace('invest_', '')
        if plan_type in INVESTMENT_PLANS:
            plan = INVESTMENT_PLANS[plan_type]
            keyboard = [
                [InlineKeyboardButton(f"üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {plan['min_amount']}‚ÇΩ", 
                                    callback_data=f'confirm_invest_{plan_type}_{plan["min_amount"]}')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')]
            ]
            
            text = f"""{plan['emoji']} *{plan['name']} –ø–ª–∞–Ω*

üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {plan['min_amount']}‚ÇΩ
üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {plan['daily_profit'] * 100}%
‚è± –°—Ä–æ–∫: 30 –¥–Ω–µ–π

–•–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å {plan['min_amount']}‚ÇΩ?"""
            
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    if query.data.startswith('confirm_invest_'):
        _, plan_type, amount = query.data.split('_')[1:]
        amount = int(amount)
        
        db = Database()
        user = db.get_user(update.effective_user.id)
        
        if not user:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')
                ]])
            )
            return
        
        if user.balance < amount:
            await query.edit_message_text(
                text=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount}‚ÇΩ\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance}‚ÇΩ",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        investment = Investment(
            user_id=user.id,
            plan_type=plan_type,
            amount=amount,
            daily_profit=INVESTMENT_PLANS[plan_type]['daily_profit'],
            start_date=datetime.now(),
            end_date=datetime.now() + timedelta(days=30)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.balance -= amount
        user.total_invested += amount
        user.investments.append(investment)
        
        db.session.add(investment)
        db.session.commit()
        
        await query.edit_message_text(
            text=f"""‚úÖ *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*

üí∞ –°—É–º–º–∞: {amount}‚ÇΩ
üìà –ü–ª–∞–Ω: {INVESTMENT_PLANS[plan_type]['name']}
üíµ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {INVESTMENT_PLANS[plan_type]['daily_profit'] * 100}%
üìÖ –°—Ä–æ–∫: 30 –¥–Ω–µ–π""",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("¬´ –ö —Å–ø–∏—Å–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", callback_data='investments')
            ]]),
            parse_mode='Markdown'
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    await query.edit_message_text(
        text="üöß –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')
        ]])
    )