from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.database import get_session
from models.user import User
from sqlalchemy import select

async def show_investments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("ü•â –ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω", callback_data='invest_basic'),
            InlineKeyboardButton("ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–ª–∞–Ω", callback_data='invest_advanced')
        ],
        [
            InlineKeyboardButton("ü•á VIP –ø–ª–∞–Ω", callback_data='invest_vip'),
            InlineKeyboardButton("üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data='invest_stats')
        ],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """üíé *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã*:

ü•â *–ë–∞–∑–æ–≤—ã–π*:
‚îú –ú–∏–Ω–∏–º—É–º: 100‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 1% –≤ –¥–µ–Ω—å

ü•à *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π*:
‚îú –ú–∏–Ω–∏–º—É–º: 500‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 1.5% –≤ –¥–µ–Ω—å

ü•á *VIP*:
‚îú –ú–∏–Ω–∏–º—É–º: 1000‚ÇΩ
‚îî –î–æ—Ö–æ–¥: 2% –≤ –¥–µ–Ω—å"""

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def handle_investment_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'invest_stats':
        async with get_session() as session:
            user = await session.scalar(
                select(User).where(User.telegram_id == update.effective_user.id)
            )
            if user:
                stats_text = f"""üìä *–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏*:

üí∞ –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {user.total_invested}‚ÇΩ
üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: {user.investment_profit}‚ÇΩ
üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {len(user.investments)}"""
            else:
                stats_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"

        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')]]
        await query.edit_message_text(
            text=stats_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return

    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    await query.edit_message_text(
        text="üöß –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='investments')
        ]])
    )