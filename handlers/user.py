import logging
from datetime import datetime
from telegram import Update, ChatMember, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import TelegramError

from config import CHANNEL_ID, ADMIN_IDS, REFERRAL_BONUS
from utils.helpers import format_currency
from utils.keyboards import Keyboards
from utils.database import Database
from models.user import User

db = Database()

async def check_channel_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def show_channel_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    keyboard = Keyboards.channel_check()
    message_text = "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    ref = context.args[0] if context.args else None

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_or_create_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
    if not user_id in ADMIN_IDS:
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed:
            await show_channel_check(update, context)
            return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if ref and ref.isdigit():
        ref_id = int(ref)
        if ref_id != user_id and not db.get_referral(ref_id, user_id):
            # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
            referrer = db.get_user(ref_id)
            if referrer:
                db.create_referral(ref_id, user_id)
                referrer.balance += REFERRAL_BONUS
                referrer.total_earned += REFERRAL_BONUS
                db.session.commit()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                try:
                    await context.bot.send_message(
                        chat_id=ref_id,
                        text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
                             f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: {format_currency(REFERRAL_BONUS)}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logging.error(f"Error sending referral bonus notification: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = Keyboards.main_menu(is_admin=(user_id in ADMIN_IDS))
    welcome_text = f"""üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

üíé –í—ã –≤ —Å–∞–º–æ–º –∫—Ä—É—Ç–æ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫-–±–æ—Ç–µ Telegram!

üöÄ *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:*
‚Ä¢ üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π
‚Ä¢ üéÅ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ üí∏ –í—ã–≤–æ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
‚Ä¢ üèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
‚Ä¢ üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∏–±—ã–ª—å

‚ú® –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user:
        await start(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
    if not user_id in ADMIN_IDS:
        is_subscribed = await check_channel_subscription(context, user_id)
        if not is_subscribed and data != 'check_subscription':
            await show_channel_check(update, context)
            return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if data == 'menu':
        await start(update, context)
    elif data == 'balance':
        await show_balance(update, context)
    elif data == 'check_subscription':
        is_subscribed = await check_channel_subscription(context, user_id)
        if is_subscribed:
            await start(update, context)
        else:
            await query.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            await show_channel_check(update, context)
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª—è—Ö

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    if query:
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.message.from_user.id

    db = Database()
    user = db.get_user(user_id)
    if not user:
        if query:
            await query.edit_message_text(
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.",
                parse_mode=ParseMode.MARKDOWN
            )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    active_investments = [inv for inv in user.investments if not inv.is_finished]
    total_profit = sum(inv.current_profit for inv in user.investments)
    referral_earnings = sum(ref.bonus_paid for ref in user.referrals)

    text = f"""üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*: {user.balance}‚ÇΩ\n\nüìà *–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏*:\n‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_investments)}\n‚îú –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: {user.total_invested}‚ÇΩ\n‚îî –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_profit}‚ÇΩ\n\nüë• *–†–µ—Ñ–µ—Ä–∞–ª—ã*:\n‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_earnings}‚ÇΩ"""

    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]]
    if query:
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )